
/*  A Bison parser, made from pic.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	LABEL	257
#define	VARIABLE	258
#define	NUMBER	259
#define	TEXT	260
#define	COMMAND_LINE	261
#define	DELIMITED	262
#define	ORDINAL	263
#define	TH	264
#define	LEFT_ARROW_HEAD	265
#define	RIGHT_ARROW_HEAD	266
#define	DOUBLE_ARROW_HEAD	267
#define	LAST	268
#define	UP	269
#define	DOWN	270
#define	LEFT	271
#define	RIGHT	272
#define	BOX	273
#define	CIRCLE	274
#define	ELLIPSE	275
#define	ARC	276
#define	LINE	277
#define	ARROW	278
#define	MOVE	279
#define	SPLINE	280
#define	HEIGHT	281
#define	RADIUS	282
#define	WIDTH	283
#define	DIAMETER	284
#define	FROM	285
#define	TO	286
#define	AT	287
#define	WITH	288
#define	BY	289
#define	THEN	290
#define	SOLID	291
#define	DOTTED	292
#define	DASHED	293
#define	CHOP	294
#define	SAME	295
#define	INVISIBLE	296
#define	LJUST	297
#define	RJUST	298
#define	ABOVE	299
#define	BELOW	300
#define	OF	301
#define	THE	302
#define	WAY	303
#define	BETWEEN	304
#define	AND	305
#define	HERE	306
#define	DOT_N	307
#define	DOT_E	308
#define	DOT_W	309
#define	DOT_S	310
#define	DOT_NE	311
#define	DOT_SE	312
#define	DOT_NW	313
#define	DOT_SW	314
#define	DOT_C	315
#define	DOT_START	316
#define	DOT_END	317
#define	DOT_X	318
#define	DOT_Y	319
#define	DOT_HT	320
#define	DOT_WID	321
#define	DOT_RAD	322
#define	SIN	323
#define	COS	324
#define	ATAN2	325
#define	LOG	326
#define	EXP	327
#define	SQRT	328
#define	K_MAX	329
#define	K_MIN	330
#define	INT	331
#define	RAND	332
#define	SRAND	333
#define	COPY	334
#define	THRU	335
#define	TOP	336
#define	BOTTOM	337
#define	UPPER	338
#define	LOWER	339
#define	SH	340
#define	PRINT	341
#define	CW	342
#define	CCW	343
#define	FOR	344
#define	DO	345
#define	IF	346
#define	ELSE	347
#define	ANDAND	348
#define	OROR	349
#define	NOTEQUAL	350
#define	EQUALEQUAL	351
#define	LESSEQUAL	352
#define	GREATEREQUAL	353
#define	LEFT_CORNER	354
#define	RIGHT_CORNER	355
#define	CENTER	356
#define	END	357
#define	START	358
#define	RESET	359
#define	UNTIL	360
#define	PLOT	361
#define	THICKNESS	362
#define	FILL	363
#define	ALIGNED	364
#define	SPRINTF	365
#define	COMMAND	366
#define	DEFINE	367
#define	UNDEF	368

#line 19 "pic.y"

#include "pic.h"
#include "ptable.h"
#include "object.h"

extern int delim_flag;
extern void do_copy(const char *);
extern void copy_rest_thru(const char *, const char *);
extern void copy_file_thru(const char *, const char *, const char *);
extern void push_body(const char *);
extern void do_for(char *var, double from, double to,
		   int by_is_multiplicative, double by, char *body);
extern void do_lookahead();

#ifndef HAVE_FMOD
extern "C" {
  double fmod(double, double);
}
#endif

#undef rand
#undef srand
extern "C" {
  int rand();
#ifdef RET_TYPE_SRAND_IS_VOID
  void srand(unsigned int);
#else
  int srand(unsigned int);
#endif
}

/* Maximum number of characters produced by printf("%g") */
#define GDIGITS 14

int yylex();
void yyerror(const char *);

void reset(const char *nm);
void reset_all();

place *lookup_label(const char *);
void define_label(const char *label, const place *pl);

direction current_direction;
position current_position;

implement_ptable(place)

PTABLE(place) top_table;

PTABLE(place) *current_table = &top_table;
saved_state *current_saved_state = 0;

object_list olist;

const char *ordinal_postfix(int n);
const char *object_type_name(object_type type);
char *format_number(const char *form, double n);
char *do_sprintf(const char *form, const double *v, int nv);


#line 82 "pic.y"
typedef union {
	char *str;
	int n;
	double x;
	struct { double x, y; } pair;
	struct { double x; char *body; } if_data;
	struct { char *str; const char *filename; int lineno; } lstr;
	struct { double *v; int nv; int maxv; } dv;
	struct { double val; int is_multiplicative; } by;
	place pl;
	object *obj;
	corner crn;
	path *pth;
	object_spec *spec;
	saved_state *pstate;
	graphics_state state;
	object_type obtype;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		414
#define	YYFLAG		-32768
#define	YYNTBASE	136

#define YYTRANSLATE(x) ((unsigned)(x) <= 368 ? yytranslate[x] : 181)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   125,     2,     2,     2,   124,     2,     2,   115,
   134,   122,   120,   117,   121,   135,   123,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,   129,   127,   118,
   128,   119,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   132,     2,   133,   126,     2,   116,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   130,     2,   131,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     8,    10,    14,    15,    17,    19,    22,
    26,    31,    33,    35,    37,    39,    41,    44,    47,    48,
    52,    55,    56,    57,    65,    66,    67,    74,    75,    86,
    88,    89,    94,    96,    98,   101,   104,   108,   110,   113,
   115,   117,   119,   120,   126,   127,   130,   132,   134,   138,
   142,   146,   150,   154,   158,   162,   166,   169,   170,   173,
   177,   179,   184,   189,   194,   195,   196,   203,   205,   206,
   208,   210,   212,   214,   216,   218,   220,   222,   224,   226,
   229,   233,   234,   239,   243,   247,   251,   255,   258,   261,
   265,   268,   272,   275,   279,   282,   286,   290,   294,   298,
   302,   306,   309,   312,   315,   319,   322,   326,   329,   333,
   336,   340,   343,   346,   349,   352,   355,   358,   361,   364,
   367,   370,   373,   376,   380,   383,   385,   391,   392,   396,
   398,   400,   402,   406,   410,   416,   422,   429,   431,   436,
   440,   444,   446,   449,   452,   456,   458,   460,   462,   466,
   468,   472,   474,   477,   480,   483,   485,   487,   489,   491,
   493,   495,   497,   500,   502,   505,   509,   511,   513,   516,
   518,   524,   529,   533,   537,   540,   542,   544,   546,   548,
   550,   552,   554,   556,   558,   560,   562,   564,   566,   568,
   570,   573,   576,   579,   582,   584,   586,   589,   592,   595,
   598,   600,   602,   604,   606,   608,   611,   614,   617,   620,
   623,   627,   631,   635,   639,   643,   647,   650,   654,   659,
   664,   671,   676,   681,   686,   693,   700,   705,   710,   714,
   719,   723,   727,   731,   735,   739,   743,   747,   751
};

static const short yyrhs[] = {   139,
     0,   137,     0,   139,   138,   139,     0,   158,     0,   138,
   140,   158,     0,     0,   140,     0,   127,     0,   140,   127,
     0,     4,   128,   155,     0,     4,   129,   128,   155,     0,
    15,     0,    16,     0,    17,     0,    18,     0,     7,     0,
   112,   150,     0,    87,   150,     0,     0,    86,   142,     8,
     0,    80,     6,     0,     0,     0,    80,     6,    81,   143,
     8,   144,   154,     0,     0,     0,    80,    81,   145,     8,
   146,   154,     0,     0,    90,     4,   128,   180,    32,   180,
   157,    91,   147,     8,     0,   152,     0,     0,   152,    93,
   148,     8,     0,   149,     0,   105,     0,   105,     4,     0,
   149,     4,     0,   149,   117,     4,     0,   151,     0,   150,
   151,     0,   180,     0,   164,     0,   166,     0,     0,    92,
   155,    36,   153,     8,     0,     0,   106,     6,     0,   180,
     0,   156,     0,   164,    97,   164,     0,   164,    96,   164,
     0,   156,    94,   156,     0,   156,    94,   180,     0,   180,
    94,   156,     0,   156,    95,   156,     0,   156,    95,   180,
     0,   180,    95,   156,     0,   125,   156,     0,     0,    35,
   180,     0,    35,   122,   180,     0,   162,     0,     3,   129,
   139,   158,     0,     3,   129,   139,   167,     0,     3,   129,
   139,   170,     0,     0,     0,   130,   159,   137,   131,   160,
   161,     0,   141,     0,     0,   158,     0,    19,     0,    20,
     0,    21,     0,    22,     0,    23,     0,    24,     0,    25,
     0,    26,     0,   164,     0,   107,   180,     0,   107,   180,
   164,     0,     0,   132,   163,   137,   133,     0,   162,    27,
   180,     0,   162,    28,   180,     0,   162,    29,   180,     0,
   162,    30,   180,     0,   162,   180,     0,   162,    15,     0,
   162,    15,   180,     0,   162,    16,     0,   162,    16,   180,
     0,   162,    18,     0,   162,    18,   180,     0,   162,    17,
     0,   162,    17,   180,     0,   162,    31,   166,     0,   162,
    32,   166,     0,   162,    33,   166,     0,   162,    34,   178,
     0,   162,    35,   169,     0,   162,    36,     0,   162,    37,
     0,   162,    38,     0,   162,    38,   180,     0,   162,    39,
     0,   162,    39,   180,     0,   162,   109,     0,   162,   109,
   180,     0,   162,    40,     0,   162,    40,   180,     0,   162,
    41,     0,   162,    42,     0,   162,    11,     0,   162,    12,
     0,   162,    13,     0,   162,    88,     0,   162,    89,     0,
   162,   164,     0,   162,    43,     0,   162,    44,     0,   162,
    45,     0,   162,    46,     0,   162,   108,   180,     0,   162,
   110,     0,     6,     0,   111,   115,     6,   165,   134,     0,
     0,   165,   117,   180,     0,   167,     0,   170,     0,   169,
     0,   166,   120,   169,     0,   166,   121,   169,     0,   115,
   166,   117,   166,   134,     0,   180,   168,   166,    51,   166,
     0,   180,   118,   166,   117,   166,   119,     0,    50,     0,
    47,    48,    49,    50,     0,   180,   117,   180,     0,   115,
   169,   134,     0,   171,     0,   171,   179,     0,   179,   171,
     0,   179,    47,   171,     0,    52,     0,     3,     0,   174,
     0,   171,   135,     3,     0,     9,     0,   116,   155,    10,
     0,    14,     0,   172,    14,     0,   172,   175,     0,   173,
   175,     0,    19,     0,    20,     0,    21,     0,    22,     0,
    23,     0,    24,     0,    26,     0,   132,   133,     0,     6,
     0,   135,     3,     0,   176,   135,     3,     0,   179,     0,
   176,     0,   176,   179,     0,   177,     0,   115,   177,   117,
   177,   134,     0,     9,    14,   175,   177,     0,    14,   175,
   177,     0,     9,   175,   177,     0,     3,   177,     0,    53,
     0,    54,     0,    55,     0,    56,     0,    57,     0,    58,
     0,    59,     0,    60,     0,    61,     0,    62,     0,    63,
     0,    82,     0,    83,     0,    17,     0,    18,     0,    84,
    17,     0,    85,    17,     0,    84,    18,     0,    85,    18,
     0,   100,     0,   101,     0,    84,   100,     0,    85,   100,
     0,    84,   101,     0,    85,   101,     0,   102,     0,   104,
     0,   103,     0,     4,     0,     5,     0,   170,    64,     0,
   170,    65,     0,   170,    66,     0,   170,    67,     0,   170,
    68,     0,   180,   120,   180,     0,   180,   121,   180,     0,
   180,   122,   180,     0,   180,   123,   180,     0,   180,   124,
   180,     0,   180,   126,   180,     0,   121,   180,     0,   115,
   155,   134,     0,    69,   115,   155,   134,     0,    70,   115,
   155,   134,     0,    71,   115,   155,   117,   155,   134,     0,
    72,   115,   155,   134,     0,    73,   115,   155,   134,     0,
    74,   115,   155,   134,     0,    75,   115,   155,   117,   155,
   134,     0,    76,   115,   155,   117,   155,   134,     0,    77,
   115,   155,   134,     0,    78,   115,   155,   134,     0,    78,
   115,   134,     0,    79,   115,   155,   134,     0,   180,   118,
   180,     0,   180,    98,   180,     0,   180,   119,   180,     0,
   180,    99,   180,     0,   180,    97,   180,     0,   180,    96,
   180,     0,   180,    94,   180,     0,   180,    95,   180,     0,
   125,   180,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   280,   282,   290,   295,   298,   302,   304,   307,   309,   312,
   318,   330,   332,   334,   336,   338,   343,   348,   354,   357,
   365,   372,   375,   377,   385,   388,   390,   397,   400,   406,
   414,   417,   428,   429,   433,   436,   438,   442,   445,   463,
   471,   473,   481,   485,   488,   491,   495,   498,   502,   509,
   515,   517,   519,   521,   523,   525,   527,   532,   535,   537,
   541,   556,   558,   566,   572,   578,   585,   588,   596,   599,
   603,   608,   612,   616,   621,   628,   635,   642,   649,   654,
   659,   666,   681,   693,   699,   705,   711,   717,   736,   743,
   750,   757,   764,   771,   778,   785,   792,   799,   814,   826,
   832,   839,   851,   855,   861,   867,   873,   879,   884,   890,
   906,   923,   928,   933,   938,   943,   948,   953,   958,   966,
   976,   986,   996,  1006,  1012,  1019,  1024,  1034,  1041,  1062,
  1065,  1073,  1076,  1081,  1086,  1091,  1096,  1103,  1105,  1108,
  1111,  1115,  1118,  1124,  1130,  1136,  1144,  1155,  1159,  1167,
  1170,  1177,  1180,  1184,  1200,  1217,  1220,  1222,  1224,  1226,
  1228,  1230,  1232,  1234,  1238,  1243,  1250,  1258,  1262,  1269,
  1274,  1280,  1286,  1292,  1298,  1306,  1309,  1311,  1313,  1315,
  1317,  1319,  1321,  1323,  1325,  1327,  1329,  1331,  1333,  1335,
  1337,  1339,  1341,  1343,  1345,  1347,  1349,  1351,  1353,  1355,
  1357,  1359,  1361,  1365,  1374,  1376,  1383,  1390,  1397,  1404,
  1411,  1413,  1415,  1417,  1425,  1433,  1446,  1448,  1450,  1459,
  1468,  1481,  1490,  1499,  1508,  1510,  1512,  1514,  1516,  1522,
  1524,  1526,  1528,  1530,  1532,  1534,  1536,  1538,  1540
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","LABEL",
"VARIABLE","NUMBER","TEXT","COMMAND_LINE","DELIMITED","ORDINAL","TH","LEFT_ARROW_HEAD",
"RIGHT_ARROW_HEAD","DOUBLE_ARROW_HEAD","LAST","UP","DOWN","LEFT","RIGHT","BOX",
"CIRCLE","ELLIPSE","ARC","LINE","ARROW","MOVE","SPLINE","HEIGHT","RADIUS","WIDTH",
"DIAMETER","FROM","TO","AT","WITH","BY","THEN","SOLID","DOTTED","DASHED","CHOP",
"SAME","INVISIBLE","LJUST","RJUST","ABOVE","BELOW","OF","THE","WAY","BETWEEN",
"AND","HERE","DOT_N","DOT_E","DOT_W","DOT_S","DOT_NE","DOT_SE","DOT_NW","DOT_SW",
"DOT_C","DOT_START","DOT_END","DOT_X","DOT_Y","DOT_HT","DOT_WID","DOT_RAD","SIN",
"COS","ATAN2","LOG","EXP","SQRT","K_MAX","K_MIN","INT","RAND","SRAND","COPY",
"THRU","TOP","BOTTOM","UPPER","LOWER","SH","PRINT","CW","CCW","FOR","DO","IF",
"ELSE","ANDAND","OROR","NOTEQUAL","EQUALEQUAL","LESSEQUAL","GREATEREQUAL","LEFT_CORNER",
"RIGHT_CORNER","CENTER","END","START","RESET","UNTIL","PLOT","THICKNESS","FILL",
"ALIGNED","SPRINTF","COMMAND","DEFINE","UNDEF","'('","'`'","','","'<'","'>'",
"'+'","'-'","'*'","'/'","'%'","'!'","'^'","';'","'='","':'","'{'","'}'","'['",
"']'","')'","'.'","top","element_list","middle_element_list","optional_separator",
"separator","placeless_element","@1","@2","@3","@4","@5","@6","@7","reset_variables",
"print_args","print_arg","simple_if","@8","until","any_expr","text_expr","optional_by",
"element","@9","@10","optional_element","object_spec","@11","text","sprintf_args",
"position","position_not_place","between","expr_pair","place","label","ordinal",
"optional_ordinal_last","nth_primitive","object_type","label_path","relative_path",
"path","corner","expr", NULL
};
#endif

static const short yyr1[] = {     0,
   136,   136,   137,   138,   138,   139,   139,   140,   140,   141,
   141,   141,   141,   141,   141,   141,   141,   141,   142,   141,
   141,   143,   144,   141,   145,   146,   141,   147,   141,   141,
   148,   141,   141,   141,   149,   149,   149,   150,   150,   151,
   151,   151,   153,   152,   154,   154,   155,   155,   156,   156,
   156,   156,   156,   156,   156,   156,   156,   157,   157,   157,
   158,   158,   158,   158,   159,   160,   158,   158,   161,   161,
   162,   162,   162,   162,   162,   162,   162,   162,   162,   162,
   162,   163,   162,   162,   162,   162,   162,   162,   162,   162,
   162,   162,   162,   162,   162,   162,   162,   162,   162,   162,
   162,   162,   162,   162,   162,   162,   162,   162,   162,   162,
   162,   162,   162,   162,   162,   162,   162,   162,   162,   162,
   162,   162,   162,   162,   162,   164,   164,   165,   165,   166,
   166,   167,   167,   167,   167,   167,   167,   168,   168,   169,
   169,   170,   170,   170,   170,   170,   171,   171,   171,   172,
   172,   173,   173,   174,   174,   175,   175,   175,   175,   175,
   175,   175,   175,   175,   176,   176,   177,   177,   177,   178,
   178,   178,   178,   178,   178,   179,   179,   179,   179,   179,
   179,   179,   179,   179,   179,   179,   179,   179,   179,   179,
   179,   179,   179,   179,   179,   179,   179,   179,   179,   179,
   179,   179,   179,   180,   180,   180,   180,   180,   180,   180,
   180,   180,   180,   180,   180,   180,   180,   180,   180,   180,
   180,   180,   180,   180,   180,   180,   180,   180,   180,   180,
   180,   180,   180,   180,   180,   180,   180,   180,   180
};

static const short yyr2[] = {     0,
     1,     1,     3,     1,     3,     0,     1,     1,     2,     3,
     4,     1,     1,     1,     1,     1,     2,     2,     0,     3,
     2,     0,     0,     7,     0,     0,     6,     0,    10,     1,
     0,     4,     1,     1,     2,     2,     3,     1,     2,     1,
     1,     1,     0,     5,     0,     2,     1,     1,     3,     3,
     3,     3,     3,     3,     3,     3,     2,     0,     2,     3,
     1,     4,     4,     4,     0,     0,     6,     1,     0,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
     3,     0,     4,     3,     3,     3,     3,     2,     2,     3,
     2,     3,     2,     3,     2,     3,     3,     3,     3,     3,
     3,     2,     2,     2,     3,     2,     3,     2,     3,     2,
     3,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     3,     2,     1,     5,     0,     3,     1,
     1,     1,     3,     3,     5,     5,     6,     1,     4,     3,
     3,     1,     2,     2,     3,     1,     1,     1,     3,     1,
     3,     1,     2,     2,     2,     1,     1,     1,     1,     1,
     1,     1,     2,     1,     2,     3,     1,     1,     2,     1,
     5,     4,     3,     3,     2,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     2,     2,     2,     2,     1,     1,     2,     2,     2,     2,
     1,     1,     1,     1,     1,     2,     2,     2,     2,     2,
     3,     3,     3,     3,     3,     3,     2,     3,     4,     4,
     6,     4,     4,     4,     6,     6,     4,     4,     3,     4,
     3,     3,     3,     3,     3,     3,     3,     3,     2
};

static const short yydefact[] = {     6,
     8,     2,     1,     7,     0,     0,   126,    16,    12,    13,
    14,    15,    71,    72,    73,    74,    75,    76,    77,    78,
     0,    19,     0,     0,     0,    34,     0,     0,     0,    65,
    82,     6,    68,    33,    30,     4,    61,    79,     9,     6,
     0,     0,    21,    25,     0,   147,   204,   205,   150,   152,
   189,   190,   146,   176,   177,   178,   179,   180,   181,   182,
   183,   184,   185,   186,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   187,   188,     0,     0,   195,
   196,   201,   203,   202,     0,     0,     0,     0,    18,    38,
    41,    42,   130,   132,   131,   142,     0,     0,   148,     0,
    40,     0,     0,     0,     0,    48,     0,     0,    47,    35,
    80,     0,    17,     6,     6,     3,     7,    36,     0,    31,
   114,   115,   116,    89,    91,    95,    93,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   102,   103,   104,   106,
   110,   112,   113,   120,   121,   122,   123,   117,   118,     0,
   108,   125,   119,    88,     0,    10,     0,    22,     0,    20,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   191,   193,   197,   199,   192,   194,   198,   200,     0,
     0,   132,    47,     0,   217,   239,    39,     0,     0,   206,
   207,   208,   209,   210,     0,   143,   164,   153,   156,   157,
   158,   159,   160,   161,   162,     0,   154,   155,     0,   144,
     0,   138,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    57,
   239,    43,     0,     0,     0,     0,     0,     0,     0,    81,
   128,     0,     0,     0,     5,    37,     0,    90,    92,    96,
    94,    84,    85,    86,    87,    97,     0,    98,    99,     0,
     0,     0,     0,     0,   168,   170,   100,   167,     0,   101,
     0,   105,   107,   111,   124,   109,   147,   204,   189,   190,
    62,     0,    63,    64,    11,     0,    26,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   229,     0,     0,   218,
     0,   141,   151,   133,   134,   149,   163,   145,     0,   237,
   238,   236,   235,   232,   234,   140,     0,   231,   233,   211,
   212,   213,   214,   215,   216,     0,     0,     0,    51,    52,
    54,    55,    50,    49,    53,   237,    56,   238,   231,     0,
    66,    83,    32,   175,     0,     0,     0,     0,   165,     0,
   169,     0,    47,    23,    45,   219,   220,     0,   222,   223,
   224,     0,     0,   227,   228,   230,     0,     0,     0,     0,
     0,    44,     0,   127,    69,     0,   174,   173,     0,   166,
    45,     0,    27,     0,     0,     0,   135,   139,     0,   136,
    58,   129,    70,    67,   172,     0,    24,    46,   221,   225,
   226,   137,     0,     0,   171,     0,    59,    28,    60,     0,
    29,     0,     0,     0
};

static const short yydefgoto[] = {   412,
     2,    32,   243,     4,    33,    45,   286,   381,   159,   355,
   410,   247,    34,    89,    90,    35,   328,   383,   180,   106,
   404,    36,   114,   375,   394,    37,   115,   107,   340,    92,
    93,   228,    94,   108,    96,    97,    98,    99,   207,   265,
   266,   267,   100,   109
};

static const short yypact[] = {  -112,
-32768,-32768,   619,  -107,  -103,   -99,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
    -4,-32768,   843,    59,   957,    63,  1399,   -46,   843,-32768,
-32768,  -112,-32768,     4,   -13,-32768,   729,-32768,-32768,  -112,
   957,   -58,    12,-32768,    89,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,    10,    14,    48,    56,    60,    66,
    70,    72,    73,    74,    92,-32768,-32768,    30,    61,-32768,
-32768,-32768,-32768,-32768,  1071,   957,  1399,  1399,   843,-32768,
-32768,   -80,-32768,-32768,   197,  1996,   313,   260,-32768,     8,
   882,    -9,   957,   957,    97,   -43,   -36,   197,  1901,-32768,
   571,   136,   843,  -112,  -112,-32768,   591,-32768,   164,-32768,
-32768,-32768,-32768,  1858,  1858,  1692,  1775,  1399,  1399,  1399,
  1399,  1504,  1504,  1504,   214,  1609,-32768,-32768,  1858,  1858,
  1858,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1399,
  1858,-32768,-32768,  2014,   471,-32768,   957,-32768,   201,-32768,
   957,   957,   957,   957,   957,   957,   957,   957,   957,   348,
   957,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    78,
   -84,    79,   996,   198,    93,    93,-32768,  1609,  1609,-32768,
-32768,-32768,-32768,-32768,   217,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,    88,-32768,-32768,     7,    90,
   176,-32768,  1399,  1399,  1399,  1399,  1399,  1399,  1399,  1504,
  1399,  1399,  1399,  1399,  1399,  1399,  1399,  1504,  1399,-32768,
    93,-32768,   957,   957,     3,     3,   957,   957,  1399,-32768,
-32768,    95,   619,    94,-32768,-32768,   221,  2014,  2014,  2014,
  2014,  2014,  2014,  2014,  2014,   -80,   882,   -80,   -80,  1931,
   367,   260,  1931,   235,  1985,-32768,-32768,-32768,  1185,-32768,
   768,  2014,  2014,  2014,  2014,  2014,  -103,   -99,    27,    53,
-32768,   -80,   -21,   169,-32768,   231,-32768,   107,   108,   126,
   114,   115,   117,   137,   140,   119,-32768,   124,   153,-32768,
  1504,-32768,-32768,-32768,-32768,-32768,-32768,    90,   242,   316,
  1429,   385,   385,   334,   334,  2014,   -25,   200,   334,   -40,
   -40,    93,    93,    93,    93,   -32,   533,   284,-32768,   316,
   199,  1534,-32768,-32768,-32768,   316,   199,  1534,   334,   -89,
-32768,-32768,-32768,-32768,   260,  1931,  1931,   177,-32768,   292,
-32768,    79,  1110,-32768,   194,-32768,-32768,   957,-32768,-32768,
-32768,   957,   957,-32768,-32768,-32768,   -78,   251,  1504,  1504,
  1399,-32768,  1399,-32768,   619,  1931,-32768,-32768,  1931,-32768,
   194,   296,-32768,   170,   171,   172,-32768,-32768,   -45,   -80,
  1301,  2014,-32768,-32768,-32768,   173,-32768,-32768,-32768,-32768,
-32768,-32768,  1290,   219,-32768,  1399,  2014,-32768,  2014,   303,
-32768,   312,   325,-32768
};

static const short yypgoto[] = {-32768,
    41,-32768,    18,   281,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   299,   -54,-32768,-32768,   -50,   -18,   -55,
-32768,  -116,-32768,-32768,-32768,-32768,-32768,     9,-32768,   -61,
   175,-32768,   -51,     2,   -97,-32768,-32768,-32768,   -85,-32768,
  -206,-32768,   -91,   -23
};


#define	YYLAST		2140


static const short yytable[] = {   101,
   245,    43,   210,   111,   196,   101,   105,   118,     7,    46,
    46,    38,   208,   154,     1,    49,    49,     3,   370,    39,
    50,    50,   156,   181,    95,    40,   -14,   373,    41,    42,
    95,    91,   301,   182,   187,   188,   189,    91,   281,   188,
   189,   188,   189,   268,   374,   153,   172,   173,   230,   116,
   233,   234,   -15,   344,   209,   387,   348,   155,   187,   235,
   236,   183,   102,   185,   186,   101,   110,   184,   112,   157,
   256,   258,   259,   402,   188,   189,    44,   176,   177,   120,
   231,   224,   225,   226,   270,   227,    95,   188,   189,   101,
    95,   369,   158,   282,   188,   189,   160,    91,  -130,  -130,
   248,   249,   250,   251,   252,   253,   254,   255,   257,   257,
   257,   308,   271,    28,    95,   272,   273,   274,   229,   240,
   119,    91,    86,    86,   161,    38,   275,   276,   162,   174,
   175,   257,   232,    95,    95,    95,   304,   305,   285,   377,
   378,   241,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   298,   299,   -14,   242,   244,   284,   -14,   317,   -14,
   178,   179,   163,    38,   271,   271,   326,   246,   268,   395,
   164,   268,   396,   351,   165,   346,   347,   329,   331,   -15,
   166,   335,   337,   -15,   167,   -15,   168,   169,   170,   310,
   311,   312,   313,   314,   315,   316,   318,   319,   320,   321,
   322,   323,   324,   325,   257,   327,   171,   303,   287,   330,
   332,   300,   302,   336,   338,   339,   260,   352,   227,   306,
   307,    95,   261,   309,   195,   341,   342,   262,   343,    95,
    51,    52,   190,   191,   192,   193,   194,   349,   354,   367,
   356,   357,   358,   333,   334,   353,   211,   359,   360,   212,
   361,    38,   364,   362,   268,   268,   363,   365,   393,   376,
   190,   191,   192,   193,   194,   197,    54,    55,    56,    57,
    58,    59,    60,    61,    62,    63,    64,   257,   199,   200,
   201,   202,   203,   204,   268,   205,   366,   268,  -131,  -131,
   368,   372,   233,   379,   380,    76,    77,    78,    79,   382,
   388,   398,    95,   399,   400,   401,   405,   389,   390,   408,
   411,   413,   117,    80,    81,    82,    83,    84,   197,   222,
   223,   224,   225,   226,   414,   227,   198,   113,   263,   283,
   397,   199,   200,   201,   202,   203,   204,     0,   205,   384,
     0,     0,     0,   385,   386,   257,   257,   391,   264,   392,
    46,    47,    48,     7,     0,     0,    49,     0,     0,     0,
     0,    50,     0,     0,    51,    52,     0,     0,     0,     0,
    95,    95,   197,     0,     0,     0,     0,     0,     0,   407,
   345,     0,   409,    38,     0,   199,   200,   201,   202,   203,
   204,   206,   205,     0,     0,     0,     0,     0,     0,    53,
    54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
    64,   215,   216,   217,   218,     0,    65,    66,    67,    68,
    69,    70,    71,    72,    73,    74,    75,     0,     0,    76,
    77,    78,    79,   239,   221,   222,   223,   224,   225,   226,
     0,   227,     0,     0,   206,     0,     0,    80,    81,    82,
    83,    84,     0,   222,   223,   224,   225,   226,    28,   227,
     0,     0,   103,    86,     0,     0,     0,     0,    87,     0,
     0,     0,   104,   277,   278,    48,     7,     8,     0,    49,
     0,   297,   217,   218,    50,     9,    10,   279,   280,    13,
    14,    15,    16,    17,    18,    19,    20,     0,   206,     0,
     0,     0,   239,   221,   222,   223,   224,   225,   226,     0,
   227,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    53,    54,    55,    56,    57,    58,    59,    60,
    61,    62,    63,    64,     0,     0,     0,     0,     0,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    21,     0,    76,    77,    78,    79,    22,    23,     0,     0,
    24,     0,    25,     0,   371,     0,     0,     0,     0,     0,
    80,    81,    82,    83,    84,    26,     7,    27,     0,     0,
     0,    28,    29,     0,     0,    85,    86,     0,     0,     0,
     0,    87,     0,     5,     6,    88,     7,     8,     0,     0,
    30,     0,    31,     0,     0,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,     0,     0,     0,
     0,     5,     6,     0,     7,     8,   213,   214,   215,   216,
   217,   218,     0,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,     0,     0,     0,     0,     0,
   239,   221,   222,   223,   224,   225,   226,     0,   227,     0,
     0,     0,     0,     0,   213,   214,   215,   216,   217,   218,
    21,     0,     0,     0,     0,     0,    22,    23,     0,     0,
    24,    28,    25,     0,     0,     0,     0,     0,   239,   221,
   222,   223,   224,   225,   226,    26,   227,    27,    21,     0,
     0,    28,    29,     0,    22,    23,     0,     0,    24,     0,
    25,     0,     0,     0,     0,     0,     0,    39,     0,     0,
    30,     0,    31,    26,     0,    27,     0,     0,     0,    28,
    29,    46,    47,    48,     7,     0,     0,    49,     0,   121,
   122,   123,    50,   124,   125,   126,   127,     0,    30,     0,
    31,     0,     0,     0,     0,   128,   129,   130,   131,   132,
   133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,     0,     0,     0,     0,     0,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
    63,    64,     0,     0,     0,     0,     0,    65,    66,    67,
    68,    69,    70,    71,    72,    73,    74,    75,     0,     0,
    76,    77,    78,    79,     0,     0,   148,   149,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    80,    81,
    82,    83,    84,     0,     0,     0,   150,   151,   152,    28,
     0,     0,     0,   103,    86,    46,    47,    48,     7,    87,
     0,    49,     0,    88,     0,     0,    50,     0,     0,    51,
    52,   213,   214,   215,   216,   217,   218,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   219,   239,   221,   222,   223,   224,
   225,   226,     0,   227,    53,    54,    55,    56,    57,    58,
    59,    60,    61,    62,    63,    64,     0,     0,     0,     0,
     0,    65,    66,    67,    68,    69,    70,    71,    72,    73,
    74,    75,     0,     0,    76,    77,    78,    79,   211,     0,
     0,   212,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    80,    81,    82,    83,    84,     0,     0,     0,
     0,     0,     0,    28,     0,     0,     0,    85,    86,    46,
    47,    48,     7,    87,     0,    49,     0,    88,     0,     0,
    50,     0,     0,    51,    52,   213,   214,   215,   216,   217,
   218,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   219,   220,
   221,   222,   223,   224,   225,   226,     0,   227,    53,    54,
    55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
     0,     0,     0,     0,     0,    65,    66,    67,    68,    69,
    70,    71,    72,    73,    74,    75,     0,     0,    76,    77,
    78,    79,   211,     0,     0,   212,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    80,    81,    82,    83,
    84,     0,     0,     0,     0,     0,     0,    28,     0,     0,
     0,   103,    86,    46,    47,    48,     7,    87,     0,    49,
     0,   104,     0,     0,    50,     0,     0,    51,    52,   237,
   238,   215,   216,   217,   218,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   219,   220,   221,   222,   223,   224,   225,   226,
     0,   227,    53,    54,    55,    56,    57,    58,    59,    60,
    61,    62,    63,    64,     0,     0,     0,     0,     0,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
     0,     0,    76,    77,    78,    79,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    80,    81,    82,    83,    84,     0,     0,     0,     0,     0,
     0,    28,     0,     0,     0,    85,    86,    46,    47,    48,
     7,    87,     0,    49,     0,   104,     0,     0,    50,     0,
     0,    51,    52,   237,   238,   215,   216,   217,   218,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   219,   239,   221,   222,
   223,   224,   225,   226,     0,   227,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,     0,     0,
     0,     0,     0,    65,    66,    67,    68,    69,    70,    71,
    72,    73,    74,    75,     0,     0,    76,    77,    78,    79,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    80,    81,    82,    83,    84,     0,
     0,     0,    46,    47,    48,    28,     0,     0,    49,   269,
    86,     0,     0,    50,     0,    87,    51,    52,     0,   104,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   403,     0,     0,     0,     0,
     0,    53,    54,    55,    56,    57,    58,    59,    60,    61,
    62,    63,    64,     0,     0,     0,     0,     0,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,     0,
     0,    76,    77,    78,    79,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    80,
    81,    82,    83,    84,   213,   214,   215,   216,   217,   218,
     0,    46,    47,    48,   103,    86,     0,    49,     0,     0,
    87,   406,    50,     0,    88,    51,    52,     0,   239,   221,
   222,   223,   224,   225,   226,     0,   227,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
    63,    64,     0,     0,     0,     0,     0,    65,    66,    67,
    68,    69,    70,    71,    72,    73,    74,    75,     0,     0,
    76,    77,    78,    79,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    80,    81,
    82,    83,    84,     0,     0,     0,    46,    47,    48,     0,
     0,     0,    49,   103,    86,     0,     0,    50,     0,    87,
    51,    52,   213,    88,   215,   216,   217,   218,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   239,   221,   222,   223,
   224,   225,   226,     0,   227,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    62,    63,    64,     0,     0,     0,
     0,     0,    65,    66,    67,    68,    69,    70,    71,    72,
    73,    74,    75,     0,     0,    76,    77,    78,    79,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    80,    81,    82,    83,    84,     0,     0,
     0,    46,    47,    48,     0,     0,     0,    49,    85,    86,
     0,     0,    50,     0,    87,    51,    52,   237,    88,   215,
   216,   217,   218,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   239,   221,   222,   223,   224,   225,   226,     0,   227,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
    63,    64,     0,     0,     0,     0,     0,    65,    66,    67,
    68,    69,    70,    71,    72,    73,    74,    75,     0,     0,
    76,    77,    78,    79,    46,    47,    48,     0,     0,     0,
    49,     0,     0,     0,     0,    50,     0,     0,    80,    81,
    82,    83,    84,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   269,    86,     0,     0,     0,     0,    87,
     0,     0,     0,    88,     0,     0,     0,     0,  -189,     0,
     0,     0,     0,    53,    54,    55,    56,    57,    58,    59,
    60,    61,    62,    63,    64,     0,     0,     0,     0,     0,
    65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
    75,     0,     0,    76,    77,    78,    79,    46,    47,    48,
     0,     0,     0,    49,     0,     0,     0,     0,    50,     0,
     0,    80,    81,    82,    83,    84,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   103,    86,     0,     0,
     0,     0,    87,     0,     0,     0,    88,     0,     0,     0,
     0,  -190,     0,     0,     0,     0,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,     0,     0,
     0,     0,     0,    65,    66,    67,    68,    69,    70,    71,
    72,    73,    74,    75,     0,     0,    76,    77,    78,    79,
    46,    47,    48,     0,     0,     0,    49,     0,     0,     0,
     0,    50,     0,     0,    80,    81,    82,    83,    84,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   103,
    86,     0,     0,     0,     0,    87,     0,     0,     0,    88,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    53,
    54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
    64,     0,     0,     0,     0,     0,    65,    66,    67,    68,
    69,    70,    71,    72,    73,    74,    75,     0,     0,    76,
    77,    78,    79,     0,     0,     0,     0,    51,    52,     0,
     0,     0,     0,     0,     0,     0,     0,    80,    81,    82,
    83,    84,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   103,    86,     0,     0,     0,     0,    87,     0,
     0,     0,    88,    54,    55,    56,    57,    58,    59,    60,
    61,    62,    63,    64,   237,   238,   215,   216,   217,   218,
     0,    51,    52,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    76,    77,    78,    79,     0,     0,   239,   221,
   222,   223,   224,   225,   226,     0,   227,     0,     0,     0,
    80,    81,    82,    83,    84,     0,     0,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,     0,
     0,     0,     0,     0,     0,   264,    76,    77,    78,    79,
     0,     0,     0,     0,     0,     0,     0,    76,    77,    78,
    79,     0,     0,     0,    80,    81,    82,    83,    84,     0,
     0,     0,     0,     0,     0,    80,    81,    82,    83,    84,
     0,     0,     0,     0,     0,     0,     0,   213,   214,   215,
   216,   217,   218,     0,     0,     0,     0,     0,     0,   350,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   195,   239,   221,   222,   223,   224,   225,   226,     0,   227
};

static const short yycheck[] = {    23,
   117,     6,   100,    27,    96,    29,    25,     4,     6,     3,
     3,     3,    98,    37,   127,     9,     9,     0,    51,   127,
    14,    14,    41,    85,    23,   129,     0,   117,   128,   129,
    29,    23,   117,    85,    89,   120,   121,    29,   155,   120,
   121,   120,   121,   135,   134,    37,    17,    18,   104,    32,
    94,    95,     0,   260,    47,   134,   263,    40,   113,    96,
    97,    85,     4,    87,    88,    89,     4,    86,   115,   128,
   132,   133,   134,   119,   120,   121,    81,    17,    18,    93,
   104,   122,   123,   124,   136,   126,    85,   120,   121,   113,
    89,   117,    81,   155,   120,   121,     8,    89,   120,   121,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   209,   136,   111,   113,   139,   140,   141,   128,   111,
   117,   113,   116,   116,   115,   117,   150,   151,   115,   100,
   101,   155,    36,   132,   133,   134,   188,   189,   157,   346,
   347,     6,   161,   162,   163,   164,   165,   166,   167,   168,
   169,   170,   171,   127,   114,   115,   155,   131,   220,   133,
   100,   101,   115,   155,   188,   189,   228,     4,   260,   376,
   115,   263,   379,   265,   115,   261,   262,   233,   234,   127,
   115,   237,   238,   131,   115,   133,   115,   115,   115,   213,
   214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
   224,   225,   226,   227,   228,   229,   115,    10,     8,   233,
   234,   134,   134,   237,   238,   239,     3,   269,   126,     3,
   133,   220,     9,    48,   135,   131,   133,    14,     8,   228,
    17,    18,    64,    65,    66,    67,    68,     3,     8,   301,
   134,   134,   117,   235,   236,   269,    47,   134,   134,    50,
   134,   243,   134,   117,   346,   347,   117,   134,   375,   345,
    64,    65,    66,    67,    68,     6,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,   301,    19,    20,
    21,    22,    23,    24,   376,    26,   134,   379,   120,   121,
    49,     8,    94,   117,     3,    82,    83,    84,    85,   106,
    50,     6,   301,   134,   134,   134,   134,   369,   370,    91,
     8,     0,    32,   100,   101,   102,   103,   104,     6,   120,
   121,   122,   123,   124,     0,   126,    14,    29,   115,   155,
   381,    19,    20,    21,    22,    23,    24,    -1,    26,   358,
    -1,    -1,    -1,   362,   363,   369,   370,   371,   135,   373,
     3,     4,     5,     6,    -1,    -1,     9,    -1,    -1,    -1,
    -1,    14,    -1,    -1,    17,    18,    -1,    -1,    -1,    -1,
   369,   370,     6,    -1,    -1,    -1,    -1,    -1,    -1,   403,
    14,    -1,   406,   375,    -1,    19,    20,    21,    22,    23,
    24,   132,    26,    -1,    -1,    -1,    -1,    -1,    -1,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
    63,    96,    97,    98,    99,    -1,    69,    70,    71,    72,
    73,    74,    75,    76,    77,    78,    79,    -1,    -1,    82,
    83,    84,    85,   118,   119,   120,   121,   122,   123,   124,
    -1,   126,    -1,    -1,   132,    -1,    -1,   100,   101,   102,
   103,   104,    -1,   120,   121,   122,   123,   124,   111,   126,
    -1,    -1,   115,   116,    -1,    -1,    -1,    -1,   121,    -1,
    -1,    -1,   125,     3,     4,     5,     6,     7,    -1,     9,
    -1,   134,    98,    99,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    -1,   132,    -1,
    -1,    -1,   118,   119,   120,   121,   122,   123,   124,    -1,
   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
    60,    61,    62,    63,    -1,    -1,    -1,    -1,    -1,    69,
    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
    80,    -1,    82,    83,    84,    85,    86,    87,    -1,    -1,
    90,    -1,    92,    -1,    32,    -1,    -1,    -1,    -1,    -1,
   100,   101,   102,   103,   104,   105,     6,   107,    -1,    -1,
    -1,   111,   112,    -1,    -1,   115,   116,    -1,    -1,    -1,
    -1,   121,    -1,     3,     4,   125,     6,     7,    -1,    -1,
   130,    -1,   132,    -1,    -1,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    -1,    -1,    -1,
    -1,     3,     4,    -1,     6,     7,    94,    95,    96,    97,
    98,    99,    -1,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    -1,    -1,    -1,    -1,    -1,
   118,   119,   120,   121,   122,   123,   124,    -1,   126,    -1,
    -1,    -1,    -1,    -1,    94,    95,    96,    97,    98,    99,
    80,    -1,    -1,    -1,    -1,    -1,    86,    87,    -1,    -1,
    90,   111,    92,    -1,    -1,    -1,    -1,    -1,   118,   119,
   120,   121,   122,   123,   124,   105,   126,   107,    80,    -1,
    -1,   111,   112,    -1,    86,    87,    -1,    -1,    90,    -1,
    92,    -1,    -1,    -1,    -1,    -1,    -1,   127,    -1,    -1,
   130,    -1,   132,   105,    -1,   107,    -1,    -1,    -1,   111,
   112,     3,     4,     5,     6,    -1,    -1,     9,    -1,    11,
    12,    13,    14,    15,    16,    17,    18,    -1,   130,    -1,
   132,    -1,    -1,    -1,    -1,    27,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
    42,    43,    44,    45,    46,    -1,    -1,    -1,    -1,    -1,
    52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
    62,    63,    -1,    -1,    -1,    -1,    -1,    69,    70,    71,
    72,    73,    74,    75,    76,    77,    78,    79,    -1,    -1,
    82,    83,    84,    85,    -1,    -1,    88,    89,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,   101,
   102,   103,   104,    -1,    -1,    -1,   108,   109,   110,   111,
    -1,    -1,    -1,   115,   116,     3,     4,     5,     6,   121,
    -1,     9,    -1,   125,    -1,    -1,    14,    -1,    -1,    17,
    18,    94,    95,    96,    97,    98,    99,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   117,   118,   119,   120,   121,   122,
   123,   124,    -1,   126,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    62,    63,    -1,    -1,    -1,    -1,
    -1,    69,    70,    71,    72,    73,    74,    75,    76,    77,
    78,    79,    -1,    -1,    82,    83,    84,    85,    47,    -1,
    -1,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   100,   101,   102,   103,   104,    -1,    -1,    -1,
    -1,    -1,    -1,   111,    -1,    -1,    -1,   115,   116,     3,
     4,     5,     6,   121,    -1,     9,    -1,   125,    -1,    -1,
    14,    -1,    -1,    17,    18,    94,    95,    96,    97,    98,
    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,   118,
   119,   120,   121,   122,   123,   124,    -1,   126,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
    -1,    -1,    -1,    -1,    -1,    69,    70,    71,    72,    73,
    74,    75,    76,    77,    78,    79,    -1,    -1,    82,    83,
    84,    85,    47,    -1,    -1,    50,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   100,   101,   102,   103,
   104,    -1,    -1,    -1,    -1,    -1,    -1,   111,    -1,    -1,
    -1,   115,   116,     3,     4,     5,     6,   121,    -1,     9,
    -1,   125,    -1,    -1,    14,    -1,    -1,    17,    18,    94,
    95,    96,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   117,   118,   119,   120,   121,   122,   123,   124,
    -1,   126,    52,    53,    54,    55,    56,    57,    58,    59,
    60,    61,    62,    63,    -1,    -1,    -1,    -1,    -1,    69,
    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
    -1,    -1,    82,    83,    84,    85,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   100,   101,   102,   103,   104,    -1,    -1,    -1,    -1,    -1,
    -1,   111,    -1,    -1,    -1,   115,   116,     3,     4,     5,
     6,   121,    -1,     9,    -1,   125,    -1,    -1,    14,    -1,
    -1,    17,    18,    94,    95,    96,    97,    98,    99,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   117,   118,   119,   120,
   121,   122,   123,   124,    -1,   126,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    -1,    -1,
    -1,    -1,    -1,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    -1,    -1,    82,    83,    84,    85,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   100,   101,   102,   103,   104,    -1,
    -1,    -1,     3,     4,     5,   111,    -1,    -1,     9,   115,
   116,    -1,    -1,    14,    -1,   121,    17,    18,    -1,   125,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    35,    -1,    -1,    -1,    -1,
    -1,    52,    53,    54,    55,    56,    57,    58,    59,    60,
    61,    62,    63,    -1,    -1,    -1,    -1,    -1,    69,    70,
    71,    72,    73,    74,    75,    76,    77,    78,    79,    -1,
    -1,    82,    83,    84,    85,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,
   101,   102,   103,   104,    94,    95,    96,    97,    98,    99,
    -1,     3,     4,     5,   115,   116,    -1,     9,    -1,    -1,
   121,   122,    14,    -1,   125,    17,    18,    -1,   118,   119,
   120,   121,   122,   123,   124,    -1,   126,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
    62,    63,    -1,    -1,    -1,    -1,    -1,    69,    70,    71,
    72,    73,    74,    75,    76,    77,    78,    79,    -1,    -1,
    82,    83,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,   101,
   102,   103,   104,    -1,    -1,    -1,     3,     4,     5,    -1,
    -1,    -1,     9,   115,   116,    -1,    -1,    14,    -1,   121,
    17,    18,    94,   125,    96,    97,    98,    99,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   118,   119,   120,   121,
   122,   123,   124,    -1,   126,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    -1,    -1,    -1,
    -1,    -1,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    -1,    -1,    82,    83,    84,    85,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   100,   101,   102,   103,   104,    -1,    -1,
    -1,     3,     4,     5,    -1,    -1,    -1,     9,   115,   116,
    -1,    -1,    14,    -1,   121,    17,    18,    94,   125,    96,
    97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   118,   119,   120,   121,   122,   123,   124,    -1,   126,
    52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
    62,    63,    -1,    -1,    -1,    -1,    -1,    69,    70,    71,
    72,    73,    74,    75,    76,    77,    78,    79,    -1,    -1,
    82,    83,    84,    85,     3,     4,     5,    -1,    -1,    -1,
     9,    -1,    -1,    -1,    -1,    14,    -1,    -1,   100,   101,
   102,   103,   104,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   115,   116,    -1,    -1,    -1,    -1,   121,
    -1,    -1,    -1,   125,    -1,    -1,    -1,    -1,    47,    -1,
    -1,    -1,    -1,    52,    53,    54,    55,    56,    57,    58,
    59,    60,    61,    62,    63,    -1,    -1,    -1,    -1,    -1,
    69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
    79,    -1,    -1,    82,    83,    84,    85,     3,     4,     5,
    -1,    -1,    -1,     9,    -1,    -1,    -1,    -1,    14,    -1,
    -1,   100,   101,   102,   103,   104,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   115,   116,    -1,    -1,
    -1,    -1,   121,    -1,    -1,    -1,   125,    -1,    -1,    -1,
    -1,    47,    -1,    -1,    -1,    -1,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    -1,    -1,
    -1,    -1,    -1,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    -1,    -1,    82,    83,    84,    85,
     3,     4,     5,    -1,    -1,    -1,     9,    -1,    -1,    -1,
    -1,    14,    -1,    -1,   100,   101,   102,   103,   104,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   115,
   116,    -1,    -1,    -1,    -1,   121,    -1,    -1,    -1,   125,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
    63,    -1,    -1,    -1,    -1,    -1,    69,    70,    71,    72,
    73,    74,    75,    76,    77,    78,    79,    -1,    -1,    82,
    83,    84,    85,    -1,    -1,    -1,    -1,    17,    18,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,   101,   102,
   103,   104,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   115,   116,    -1,    -1,    -1,    -1,   121,    -1,
    -1,    -1,   125,    53,    54,    55,    56,    57,    58,    59,
    60,    61,    62,    63,    94,    95,    96,    97,    98,    99,
    -1,    17,    18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    82,    83,    84,    85,    -1,    -1,   118,   119,
   120,   121,   122,   123,   124,    -1,   126,    -1,    -1,    -1,
   100,   101,   102,   103,   104,    -1,    -1,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    53,    54,
    55,    56,    57,    58,    59,    60,    61,    62,    63,    -1,
    -1,    -1,    -1,    -1,    -1,   135,    82,    83,    84,    85,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    82,    83,    84,
    85,    -1,    -1,    -1,   100,   101,   102,   103,   104,    -1,
    -1,    -1,    -1,    -1,    -1,   100,   101,   102,   103,   104,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    94,    95,    96,
    97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,   135,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   135,   118,   119,   120,   121,   122,   123,   124,    -1,   126
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/bison/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/bison/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 2:
#line 283 "pic.y"
{
		  if (olist.head)
		    print_picture(olist.head);
		;
    break;}
case 3:
#line 292 "pic.y"
{ yyval.pl = yyvsp[-1].pl; ;
    break;}
case 4:
#line 297 "pic.y"
{ yyval.pl = yyvsp[0].pl; ;
    break;}
case 5:
#line 299 "pic.y"
{ yyval.pl = yyvsp[-2].pl; ;
    break;}
case 10:
#line 314 "pic.y"
{
		  define_variable(yyvsp[-2].str, yyvsp[0].x);
		  a_delete yyvsp[-2].str;
		;
    break;}
case 11:
#line 319 "pic.y"
{
		  place *p = lookup_label(yyvsp[-3].str);
		  if (!p) {
		    lex_error("variable `%1' not defined", yyvsp[-3].str);
		    YYABORT;
		  }
		  p->obj = 0;
		  p->x = yyvsp[0].x;
		  p->y = 0.0;
		  a_delete yyvsp[-3].str;
		;
    break;}
case 12:
#line 331 "pic.y"
{ current_direction = UP_DIRECTION; ;
    break;}
case 13:
#line 333 "pic.y"
{ current_direction = DOWN_DIRECTION; ;
    break;}
case 14:
#line 335 "pic.y"
{ current_direction = LEFT_DIRECTION; ;
    break;}
case 15:
#line 337 "pic.y"
{ current_direction = RIGHT_DIRECTION; ;
    break;}
case 16:
#line 339 "pic.y"
{
		  olist.append(make_command_object(yyvsp[0].lstr.str, yyvsp[0].lstr.filename,
						   yyvsp[0].lstr.lineno));
		;
    break;}
case 17:
#line 344 "pic.y"
{
		  olist.append(make_command_object(yyvsp[0].lstr.str, yyvsp[0].lstr.filename,
						   yyvsp[0].lstr.lineno));
		;
    break;}
case 18:
#line 349 "pic.y"
{
		  fprintf(stderr, "%s\n", yyvsp[0].lstr.str);
		  a_delete yyvsp[0].lstr.str;
	          fflush(stderr);
		;
    break;}
case 19:
#line 355 "pic.y"
{ delim_flag = 1; ;
    break;}
case 20:
#line 357 "pic.y"
{
		  delim_flag = 0;
		  if (safer_flag)
		    lex_error("unsafe to run command `%1'", yyvsp[0].str);
		  else
		    system(yyvsp[0].str);
		  a_delete yyvsp[0].str;
		;
    break;}
case 21:
#line 366 "pic.y"
{
		  if (yychar < 0)
		    do_lookahead();
		  do_copy(yyvsp[0].lstr.str);
		  // do not delete the filename
		;
    break;}
case 22:
#line 373 "pic.y"
{ delim_flag = 2; ;
    break;}
case 23:
#line 375 "pic.y"
{ delim_flag = 0; ;
    break;}
case 24:
#line 377 "pic.y"
{
		  if (yychar < 0)
		    do_lookahead();
		  copy_file_thru(yyvsp[-5].lstr.str, yyvsp[-2].str, yyvsp[0].str);
		  // do not delete the filename
		  a_delete yyvsp[-2].str;
		  a_delete yyvsp[0].str;
		;
    break;}
case 25:
#line 386 "pic.y"
{ delim_flag = 2; ;
    break;}
case 26:
#line 388 "pic.y"
{ delim_flag = 0; ;
    break;}
case 27:
#line 390 "pic.y"
{
		  if (yychar < 0)
		    do_lookahead();
		  copy_rest_thru(yyvsp[-2].str, yyvsp[0].str);
		  a_delete yyvsp[-2].str;
		  a_delete yyvsp[0].str;
		;
    break;}
case 28:
#line 398 "pic.y"
{ delim_flag = 1; ;
    break;}
case 29:
#line 400 "pic.y"
{
		  delim_flag = 0;
		  if (yychar < 0)
		    do_lookahead();
		  do_for(yyvsp[-8].str, yyvsp[-6].x, yyvsp[-4].x, yyvsp[-3].by.is_multiplicative, yyvsp[-3].by.val, yyvsp[0].str); 
		;
    break;}
case 30:
#line 407 "pic.y"
{
		  if (yychar < 0)
		    do_lookahead();
		  if (yyvsp[0].if_data.x != 0.0)
		    push_body(yyvsp[0].if_data.body);
		  a_delete yyvsp[0].if_data.body;
		;
    break;}
case 31:
#line 415 "pic.y"
{ delim_flag = 1; ;
    break;}
case 32:
#line 417 "pic.y"
{
		  delim_flag = 0;
		  if (yychar < 0)
		    do_lookahead();
		  if (yyvsp[-3].if_data.x != 0.0)
		    push_body(yyvsp[-3].if_data.body);
		  else
		    push_body(yyvsp[0].str);
		  a_delete yyvsp[-3].if_data.body;
		  a_delete yyvsp[0].str;
		;
    break;}
case 34:
#line 430 "pic.y"
{ define_variable("scale", 1.0); ;
    break;}
case 35:
#line 435 "pic.y"
{ reset(yyvsp[0].str); a_delete yyvsp[0].str; ;
    break;}
case 36:
#line 437 "pic.y"
{ reset(yyvsp[0].str); a_delete yyvsp[0].str; ;
    break;}
case 37:
#line 439 "pic.y"
{ reset(yyvsp[0].str); a_delete yyvsp[0].str; ;
    break;}
case 38:
#line 444 "pic.y"
{ yyval.lstr = yyvsp[0].lstr; ;
    break;}
case 39:
#line 446 "pic.y"
{
		  yyval.lstr.str = new char[strlen(yyvsp[-1].lstr.str) + strlen(yyvsp[0].lstr.str) + 1];
		  strcpy(yyval.lstr.str, yyvsp[-1].lstr.str);
		  strcat(yyval.lstr.str, yyvsp[0].lstr.str);
		  a_delete yyvsp[-1].lstr.str;
		  a_delete yyvsp[0].lstr.str;
		  if (yyvsp[-1].lstr.filename) {
		    yyval.lstr.filename = yyvsp[-1].lstr.filename;
		    yyval.lstr.lineno = yyvsp[-1].lstr.lineno;
		  }
		  else if (yyvsp[0].lstr.filename) {
		    yyval.lstr.filename = yyvsp[0].lstr.filename;
		    yyval.lstr.lineno = yyvsp[0].lstr.lineno;
		  }
		;
    break;}
case 40:
#line 465 "pic.y"
{
		  yyval.lstr.str = new char[GDIGITS + 1];
		  sprintf(yyval.lstr.str, "%g", yyvsp[0].x);
		  yyval.lstr.filename = 0;
		  yyval.lstr.lineno = 0;
		;
    break;}
case 41:
#line 472 "pic.y"
{ yyval.lstr = yyvsp[0].lstr; ;
    break;}
case 42:
#line 474 "pic.y"
{
		  yyval.lstr.str = new char[GDIGITS + 2 + GDIGITS + 1];
		  sprintf(yyval.lstr.str, "%g, %g", yyvsp[0].pair.x, yyvsp[0].pair.y);
		  yyval.lstr.filename = 0;
		  yyval.lstr.lineno = 0;
		;
    break;}
case 43:
#line 483 "pic.y"
{ delim_flag = 1; ;
    break;}
case 44:
#line 485 "pic.y"
{ delim_flag = 0; yyval.if_data.x = yyvsp[-3].x; yyval.if_data.body = yyvsp[0].str; ;
    break;}
case 45:
#line 490 "pic.y"
{ yyval.str = 0; ;
    break;}
case 46:
#line 492 "pic.y"
{ yyval.str = yyvsp[0].lstr.str; ;
    break;}
case 47:
#line 497 "pic.y"
{ yyval.x = yyvsp[0].x; ;
    break;}
case 48:
#line 499 "pic.y"
{ yyval.x = yyvsp[0].x; ;
    break;}
case 49:
#line 504 "pic.y"
{
		  yyval.x = strcmp(yyvsp[-2].lstr.str, yyvsp[0].lstr.str) == 0;
		  a_delete yyvsp[-2].lstr.str;
		  a_delete yyvsp[0].lstr.str;
		;
    break;}
case 50:
#line 510 "pic.y"
{
		  yyval.x = strcmp(yyvsp[-2].lstr.str, yyvsp[0].lstr.str) != 0;
		  a_delete yyvsp[-2].lstr.str;
		  a_delete yyvsp[0].lstr.str;
		;
    break;}
case 51:
#line 516 "pic.y"
{ yyval.x = (yyvsp[-2].x != 0.0 && yyvsp[0].x != 0.0); ;
    break;}
case 52:
#line 518 "pic.y"
{ yyval.x = (yyvsp[-2].x != 0.0 && yyvsp[0].x != 0.0); ;
    break;}
case 53:
#line 520 "pic.y"
{ yyval.x = (yyvsp[-2].x != 0.0 && yyvsp[0].x != 0.0); ;
    break;}
case 54:
#line 522 "pic.y"
{ yyval.x = (yyvsp[-2].x != 0.0 || yyvsp[0].x != 0.0); ;
    break;}
case 55:
#line 524 "pic.y"
{ yyval.x = (yyvsp[-2].x != 0.0 || yyvsp[0].x != 0.0); ;
    break;}
case 56:
#line 526 "pic.y"
{ yyval.x = (yyvsp[-2].x != 0.0 || yyvsp[0].x != 0.0); ;
    break;}
case 57:
#line 528 "pic.y"
{ yyval.x = (yyvsp[0].x == 0.0); ;
    break;}
case 58:
#line 534 "pic.y"
{ yyval.by.val = 1.0; yyval.by.is_multiplicative = 0; ;
    break;}
case 59:
#line 536 "pic.y"
{ yyval.by.val = yyvsp[0].x; yyval.by.is_multiplicative = 0; ;
    break;}
case 60:
#line 538 "pic.y"
{ yyval.by.val = yyvsp[0].x; yyval.by.is_multiplicative = 1; ;
    break;}
case 61:
#line 543 "pic.y"
{
		  yyval.pl.obj = yyvsp[0].spec->make_object(&current_position,
					   &current_direction);
		  if (yyval.pl.obj == 0)
		    YYABORT;
		  delete yyvsp[0].spec;
		  if (yyval.pl.obj)
		    olist.append(yyval.pl.obj);
		  else {
		    yyval.pl.x = current_position.x;
		    yyval.pl.y = current_position.y;
		  }
		;
    break;}
case 62:
#line 557 "pic.y"
{ yyval.pl = yyvsp[0].pl; define_label(yyvsp[-3].str, & yyval.pl); a_delete yyvsp[-3].str; ;
    break;}
case 63:
#line 559 "pic.y"
{
		  yyval.pl.obj = 0;
		  yyval.pl.x = yyvsp[0].pair.x;
		  yyval.pl.y = yyvsp[0].pair.y;
		  define_label(yyvsp[-3].str, & yyval.pl);
		  a_delete yyvsp[-3].str;
		;
    break;}
case 64:
#line 567 "pic.y"
{
		  yyval.pl = yyvsp[0].pl;
		  define_label(yyvsp[-3].str, & yyval.pl);
		  a_delete yyvsp[-3].str;
		;
    break;}
case 65:
#line 573 "pic.y"
{
		  yyval.state.x = current_position.x;
		  yyval.state.y = current_position.y;
		  yyval.state.dir = current_direction;
		;
    break;}
case 66:
#line 579 "pic.y"
{
		  current_position.x = yyvsp[-2].state.x;
		  current_position.y = yyvsp[-2].state.y;
		  current_direction = yyvsp[-2].state.dir;
		;
    break;}
case 67:
#line 585 "pic.y"
{
		  yyval.pl = yyvsp[-3].pl;
		;
    break;}
case 68:
#line 589 "pic.y"
{
		  yyval.pl.obj = 0;
		  yyval.pl.x = current_position.x;
		  yyval.pl.y = current_position.y;
		;
    break;}
case 69:
#line 598 "pic.y"
{;
    break;}
case 70:
#line 600 "pic.y"
{;
    break;}
case 71:
#line 605 "pic.y"
{
		  yyval.spec = new object_spec(BOX_OBJECT);
		;
    break;}
case 72:
#line 609 "pic.y"
{
		  yyval.spec = new object_spec(CIRCLE_OBJECT);
		;
    break;}
case 73:
#line 613 "pic.y"
{
		  yyval.spec = new object_spec(ELLIPSE_OBJECT);
		;
    break;}
case 74:
#line 617 "pic.y"
{
		  yyval.spec = new object_spec(ARC_OBJECT);
		  yyval.spec->dir = current_direction;
		;
    break;}
case 75:
#line 622 "pic.y"
{
		  yyval.spec = new object_spec(LINE_OBJECT);
		  lookup_variable("lineht", & yyval.spec->segment_height);
		  lookup_variable("linewid", & yyval.spec->segment_width);
		  yyval.spec->dir = current_direction;
		;
    break;}
case 76:
#line 629 "pic.y"
{
		  yyval.spec = new object_spec(ARROW_OBJECT);
		  lookup_variable("lineht", & yyval.spec->segment_height);
		  lookup_variable("linewid", & yyval.spec->segment_width);
		  yyval.spec->dir = current_direction;
		;
    break;}
case 77:
#line 636 "pic.y"
{
		  yyval.spec = new object_spec(MOVE_OBJECT);
		  lookup_variable("moveht", & yyval.spec->segment_height);
		  lookup_variable("movewid", & yyval.spec->segment_width);
		  yyval.spec->dir = current_direction;
		;
    break;}
case 78:
#line 643 "pic.y"
{
		  yyval.spec = new object_spec(SPLINE_OBJECT);
		  lookup_variable("lineht", & yyval.spec->segment_height);
		  lookup_variable("linewid", & yyval.spec->segment_width);
		  yyval.spec->dir = current_direction;
		;
    break;}
case 79:
#line 650 "pic.y"
{
		  yyval.spec = new object_spec(TEXT_OBJECT);
		  yyval.spec->text = new text_item(yyvsp[0].lstr.str, yyvsp[0].lstr.filename, yyvsp[0].lstr.lineno);
		;
    break;}
case 80:
#line 655 "pic.y"
{
		  yyval.spec = new object_spec(TEXT_OBJECT);
		  yyval.spec->text = new text_item(format_number(0, yyvsp[0].x), 0, -1);
		;
    break;}
case 81:
#line 660 "pic.y"
{
		  yyval.spec = new object_spec(TEXT_OBJECT);
		  yyval.spec->text = new text_item(format_number(yyvsp[0].lstr.str, yyvsp[-1].x),
					   yyvsp[0].lstr.filename, yyvsp[0].lstr.lineno);
		  a_delete yyvsp[0].lstr.str;
		;
    break;}
case 82:
#line 667 "pic.y"
{
		  saved_state *p = new saved_state;
		  yyval.pstate = p;
		  p->x = current_position.x;
		  p->y = current_position.y;
		  p->dir = current_direction;
		  p->tbl = current_table;
		  p->prev = current_saved_state;
		  current_position.x = 0.0;
		  current_position.y = 0.0;
		  current_table = new PTABLE(place);
		  current_saved_state = p;
		  olist.append(make_mark_object());
		;
    break;}
case 83:
#line 682 "pic.y"
{
		  current_position.x = yyvsp[-2].pstate->x;
		  current_position.y = yyvsp[-2].pstate->y;
		  current_direction = yyvsp[-2].pstate->dir;
		  yyval.spec = new object_spec(BLOCK_OBJECT);
		  olist.wrap_up_block(& yyval.spec->oblist);
		  yyval.spec->tbl = current_table;
		  current_table = yyvsp[-2].pstate->tbl;
		  current_saved_state = yyvsp[-2].pstate->prev;
		  delete yyvsp[-2].pstate;
		;
    break;}
case 84:
#line 694 "pic.y"
{
		  yyval.spec = yyvsp[-2].spec;
		  yyval.spec->height = yyvsp[0].x;
		  yyval.spec->flags |= HAS_HEIGHT;
		;
    break;}
case 85:
#line 700 "pic.y"
{
		  yyval.spec = yyvsp[-2].spec;
		  yyval.spec->radius = yyvsp[0].x;
		  yyval.spec->flags |= HAS_RADIUS;
		;
    break;}
case 86:
#line 706 "pic.y"
{
		  yyval.spec = yyvsp[-2].spec;
		  yyval.spec->width = yyvsp[0].x;
		  yyval.spec->flags |= HAS_WIDTH;
		;
    break;}
case 87:
#line 712 "pic.y"
{
		  yyval.spec = yyvsp[-2].spec;
		  yyval.spec->radius = yyvsp[0].x/2.0;
		  yyval.spec->flags |= HAS_RADIUS;
		;
    break;}
case 88:
#line 718 "pic.y"
{
		  yyval.spec = yyvsp[-1].spec;
		  yyval.spec->flags |= HAS_SEGMENT;
		  switch (yyval.spec->dir) {
		  case UP_DIRECTION:
		    yyval.spec->segment_pos.y += yyvsp[0].x;
		    break;
		  case DOWN_DIRECTION:
		    yyval.spec->segment_pos.y -= yyvsp[0].x;
		    break;
		  case RIGHT_DIRECTION:
		    yyval.spec->segment_pos.x += yyvsp[0].x;
		    break;
		  case LEFT_DIRECTION:
		    yyval.spec->segment_pos.x -= yyvsp[0].x;
		    break;
		  }
		;
    break;}
case 89:
#line 737 "pic.y"
{
		  yyval.spec = yyvsp[-1].spec;
		  yyval.spec->dir = UP_DIRECTION;
		  yyval.spec->flags |= HAS_SEGMENT;
		  yyval.spec->segment_pos.y += yyval.spec->segment_height;
		;
    break;}
case 90:
#line 744 "pic.y"
{
		  yyval.spec = yyvsp[-2].spec;
		  yyval.spec->dir = UP_DIRECTION;
		  yyval.spec->flags |= HAS_SEGMENT;
		  yyval.spec->segment_pos.y += yyvsp[0].x;
		;
    break;}
case 91:
#line 751 "pic.y"
{
		  yyval.spec = yyvsp[-1].spec;
		  yyval.spec->dir = DOWN_DIRECTION;
		  yyval.spec->flags |= HAS_SEGMENT;
		  yyval.spec->segment_pos.y -= yyval.spec->segment_height;
		;
    break;}
case 92:
#line 758 "pic.y"
{
		  yyval.spec = yyvsp[-2].spec;
		  yyval.spec->dir = DOWN_DIRECTION;
		  yyval.spec->flags |= HAS_SEGMENT;
		  yyval.spec->segment_pos.y -= yyvsp[0].x;
		;
    break;}
case 93:
#line 765 "pic.y"
{
		  yyval.spec = yyvsp[-1].spec;
		  yyval.spec->dir = RIGHT_DIRECTION;
		  yyval.spec->flags |= HAS_SEGMENT;
		  yyval.spec->segment_pos.x += yyval.spec->segment_width;
		;
    break;}
case 94:
#line 772 "pic.y"
{
		  yyval.spec = yyvsp[-2].spec;
		  yyval.spec->dir = RIGHT_DIRECTION;
		  yyval.spec->flags |= HAS_SEGMENT;
		  yyval.spec->segment_pos.x += yyvsp[0].x;
		;
    break;}
case 95:
#line 779 "pic.y"
{
		  yyval.spec = yyvsp[-1].spec;
		  yyval.spec->dir = LEFT_DIRECTION;
		  yyval.spec->flags |= HAS_SEGMENT;
		  yyval.spec->segment_pos.x -= yyval.spec->segment_width;
		;
    break;}
case 96:
#line 786 "pic.y"
{
		  yyval.spec = yyvsp[-2].spec;
		  yyval.spec->dir = LEFT_DIRECTION;
		  yyval.spec->flags |= HAS_SEGMENT;
		  yyval.spec->segment_pos.x -= yyvsp[0].x;
		;
    break;}
case 97:
#line 793 "pic.y"
{
		  yyval.spec = yyvsp[-2].spec;
		  yyval.spec->flags |= HAS_FROM;
		  yyval.spec->from.x = yyvsp[0].pair.x;
		  yyval.spec->from.y = yyvsp[0].pair.y;
		;
    break;}
case 98:
#line 800 "pic.y"
{
		  yyval.spec = yyvsp[-2].spec;
		  if (yyval.spec->flags & HAS_SEGMENT)
		    yyval.spec->segment_list = new segment(yyval.spec->segment_pos,
						   yyval.spec->segment_is_absolute,
						   yyval.spec->segment_list);
		  yyval.spec->flags |= HAS_SEGMENT;
		  yyval.spec->segment_pos.x = yyvsp[0].pair.x;
		  yyval.spec->segment_pos.y = yyvsp[0].pair.y;
		  yyval.spec->segment_is_absolute = 1;
		  yyval.spec->flags |= HAS_TO;
		  yyval.spec->to.x = yyvsp[0].pair.x;
		  yyval.spec->to.y = yyvsp[0].pair.y;
		;
    break;}
case 99:
#line 815 "pic.y"
{
		  yyval.spec = yyvsp[-2].spec;
		  yyval.spec->flags |= HAS_AT;
		  yyval.spec->at.x = yyvsp[0].pair.x;
		  yyval.spec->at.y = yyvsp[0].pair.y;
		  if (yyval.spec->type != ARC_OBJECT) {
		    yyval.spec->flags |= HAS_FROM;
		    yyval.spec->from.x = yyvsp[0].pair.x;
		    yyval.spec->from.y = yyvsp[0].pair.y;
		  }
		;
    break;}
case 100:
#line 827 "pic.y"
{
		  yyval.spec = yyvsp[-2].spec;
		  yyval.spec->flags |= HAS_WITH;
		  yyval.spec->with = yyvsp[0].pth;
		;
    break;}
case 101:
#line 833 "pic.y"
{
		  yyval.spec = yyvsp[-2].spec;
		  yyval.spec->flags |= HAS_SEGMENT;
		  yyval.spec->segment_pos.x += yyvsp[0].pair.x;
		  yyval.spec->segment_pos.y += yyvsp[0].pair.y;
		;
    break;}
case 102:
#line 840 "pic.y"
{
		  yyval.spec = yyvsp[-1].spec;
		  if (yyval.spec->flags & HAS_SEGMENT) {
		    yyval.spec->segment_list = new segment(yyval.spec->segment_pos,
						   yyval.spec->segment_is_absolute,
						   yyval.spec->segment_list);
		    yyval.spec->flags &= ~HAS_SEGMENT;
		    yyval.spec->segment_pos.x = yyval.spec->segment_pos.y = 0.0;
		    yyval.spec->segment_is_absolute = 0;
		  }
		;
    break;}
case 103:
#line 852 "pic.y"
{
		  yyval.spec = yyvsp[-1].spec;	// nothing
		;
    break;}
case 104:
#line 856 "pic.y"
{
		  yyval.spec = yyvsp[-1].spec;
		  yyval.spec->flags |= IS_DOTTED;
		  lookup_variable("dashwid", & yyval.spec->dash_width);
		;
    break;}
case 105:
#line 862 "pic.y"
{
		  yyval.spec = yyvsp[-2].spec;
		  yyval.spec->flags |= IS_DOTTED;
		  yyval.spec->dash_width = yyvsp[0].x;
		;
    break;}
case 106:
#line 868 "pic.y"
{
		  yyval.spec = yyvsp[-1].spec;
		  yyval.spec->flags |= IS_DASHED;
		  lookup_variable("dashwid", & yyval.spec->dash_width);
		;
    break;}
case 107:
#line 874 "pic.y"
{
		  yyval.spec = yyvsp[-2].spec;
		  yyval.spec->flags |= IS_DASHED;
		  yyval.spec->dash_width = yyvsp[0].x;
		;
    break;}
case 108:
#line 880 "pic.y"
{
		  yyval.spec = yyvsp[-1].spec;
		  yyval.spec->flags |= IS_DEFAULT_FILLED;
		;
    break;}
case 109:
#line 885 "pic.y"
{
		  yyval.spec = yyvsp[-2].spec;
		  yyval.spec->flags |= IS_FILLED;
		  yyval.spec->fill = yyvsp[0].x;
		;
    break;}
case 110:
#line 891 "pic.y"
{
		  yyval.spec = yyvsp[-1].spec;
		  // line chop chop means line chop 0 chop 0
		  if (yyval.spec->flags & IS_DEFAULT_CHOPPED) {
		    yyval.spec->flags |= IS_CHOPPED;
		    yyval.spec->flags &= ~IS_DEFAULT_CHOPPED;
		    yyval.spec->start_chop = yyval.spec->end_chop = 0.0;
		  }
		  else if (yyval.spec->flags & IS_CHOPPED) {
		    yyval.spec->end_chop = 0.0;
		  }
		  else {
		    yyval.spec->flags |= IS_DEFAULT_CHOPPED;
		  }
		;
    break;}
case 111:
#line 907 "pic.y"
{
		  yyval.spec = yyvsp[-2].spec;
		  if (yyval.spec->flags & IS_DEFAULT_CHOPPED) {
		    yyval.spec->flags |= IS_CHOPPED;
		    yyval.spec->flags &= ~IS_DEFAULT_CHOPPED;
		    yyval.spec->start_chop = 0.0;
		    yyval.spec->end_chop = yyvsp[0].x;
		  }
		  else if (yyval.spec->flags & IS_CHOPPED) {
		    yyval.spec->end_chop = yyvsp[0].x;
		  }
		  else {
		    yyval.spec->start_chop = yyval.spec->end_chop = yyvsp[0].x;
		    yyval.spec->flags |= IS_CHOPPED;
		  }
		;
    break;}
case 112:
#line 924 "pic.y"
{
		  yyval.spec = yyvsp[-1].spec;
		  yyval.spec->flags |= IS_SAME;
		;
    break;}
case 113:
#line 929 "pic.y"
{
		  yyval.spec = yyvsp[-1].spec;
		  yyval.spec->flags |= IS_INVISIBLE;
		;
    break;}
case 114:
#line 934 "pic.y"
{
		  yyval.spec = yyvsp[-1].spec;
		  yyval.spec->flags |= HAS_LEFT_ARROW_HEAD;
		;
    break;}
case 115:
#line 939 "pic.y"
{
		  yyval.spec = yyvsp[-1].spec;
		  yyval.spec->flags |= HAS_RIGHT_ARROW_HEAD;
		;
    break;}
case 116:
#line 944 "pic.y"
{
		  yyval.spec = yyvsp[-1].spec;
		  yyval.spec->flags |= (HAS_LEFT_ARROW_HEAD|HAS_RIGHT_ARROW_HEAD);
		;
    break;}
case 117:
#line 949 "pic.y"
{
		  yyval.spec = yyvsp[-1].spec;
		  yyval.spec->flags |= IS_CLOCKWISE;
		;
    break;}
case 118:
#line 954 "pic.y"
{
		  yyval.spec = yyvsp[-1].spec;
		  yyval.spec->flags &= ~IS_CLOCKWISE;
		;
    break;}
case 119:
#line 959 "pic.y"
{
		  yyval.spec = yyvsp[-1].spec;
		  text_item **p;
		  for (p = & yyval.spec->text; *p; p = &(*p)->next)
		    ;
		  *p = new text_item(yyvsp[0].lstr.str, yyvsp[0].lstr.filename, yyvsp[0].lstr.lineno);
		;
    break;}
case 120:
#line 967 "pic.y"
{
		  yyval.spec = yyvsp[-1].spec;
		  if (yyval.spec->text) {
		    text_item *p;
		    for (p = yyval.spec->text; p->next; p = p->next)
		      ;
		    p->adj.h = LEFT_ADJUST;
		  }
		;
    break;}
case 121:
#line 977 "pic.y"
{
		  yyval.spec = yyvsp[-1].spec;
		  if (yyval.spec->text) {
		    text_item *p;
		    for (p = yyval.spec->text; p->next; p = p->next)
		      ;
		    p->adj.h = RIGHT_ADJUST;
		  }
		;
    break;}
case 122:
#line 987 "pic.y"
{
		  yyval.spec = yyvsp[-1].spec;
		  if (yyval.spec->text) {
		    text_item *p;
		    for (p = yyval.spec->text; p->next; p = p->next)
		      ;
		    p->adj.v = ABOVE_ADJUST;
		  }
		;
    break;}
case 123:
#line 997 "pic.y"
{
		  yyval.spec = yyvsp[-1].spec;
		  if (yyval.spec->text) {
		    text_item *p;
		    for (p = yyval.spec->text; p->next; p = p->next)
		      ;
		    p->adj.v = BELOW_ADJUST;
		  }
		;
    break;}
case 124:
#line 1007 "pic.y"
{
		  yyval.spec = yyvsp[-2].spec;
		  yyval.spec->flags |= HAS_THICKNESS;
		  yyval.spec->thickness = yyvsp[0].x;
		;
    break;}
case 125:
#line 1013 "pic.y"
{
		  yyval.spec = yyvsp[-1].spec;
		  yyval.spec->flags |= IS_ALIGNED;
		;
    break;}
case 126:
#line 1021 "pic.y"
{
		  yyval.lstr = yyvsp[0].lstr;
		;
    break;}
case 127:
#line 1025 "pic.y"
{
		  yyval.lstr.filename = yyvsp[-2].lstr.filename;
		  yyval.lstr.lineno = yyvsp[-2].lstr.lineno;
		  yyval.lstr.str = do_sprintf(yyvsp[-2].lstr.str, yyvsp[-1].dv.v, yyvsp[-1].dv.nv);
		  a_delete yyvsp[-1].dv.v;
		  a_delete yyvsp[-2].lstr.str;
		;
    break;}
case 128:
#line 1036 "pic.y"
{
		  yyval.dv.v = 0;
		  yyval.dv.nv = 0;
		  yyval.dv.maxv = 0;
		;
    break;}
case 129:
#line 1042 "pic.y"
{
		  yyval.dv = yyvsp[-2].dv;
		  if (yyval.dv.nv >= yyval.dv.maxv) {
		    if (yyval.dv.nv == 0) {
		      yyval.dv.v = new double[4];
		      yyval.dv.maxv = 4;
		    }
		    else {
		      double *oldv = yyval.dv.v;
		      yyval.dv.maxv *= 2;
		      yyval.dv.v = new double[yyval.dv.maxv];
		      memcpy(yyval.dv.v, oldv, yyval.dv.nv*sizeof(double));
		      a_delete oldv;
		    }
		  }
		  yyval.dv.v[yyval.dv.nv] = yyvsp[0].x;
		  yyval.dv.nv += 1;
		;
    break;}
case 130:
#line 1064 "pic.y"
{ yyval.pair = yyvsp[0].pair; ;
    break;}
case 131:
#line 1066 "pic.y"
{
		  position pos = yyvsp[0].pl;
		  yyval.pair.x = pos.x;
		  yyval.pair.y = pos.y;
		;
    break;}
case 132:
#line 1075 "pic.y"
{ yyval.pair = yyvsp[0].pair; ;
    break;}
case 133:
#line 1077 "pic.y"
{
		  yyval.pair.x = yyvsp[-2].pair.x + yyvsp[0].pair.x;
		  yyval.pair.y = yyvsp[-2].pair.y + yyvsp[0].pair.y;
		;
    break;}
case 134:
#line 1082 "pic.y"
{
		  yyval.pair.x = yyvsp[-2].pair.x - yyvsp[0].pair.x;
		  yyval.pair.y = yyvsp[-2].pair.y - yyvsp[0].pair.y;
		;
    break;}
case 135:
#line 1087 "pic.y"
{
		  yyval.pair.x = yyvsp[-3].pair.x;
		  yyval.pair.y = yyvsp[-1].pair.y;
		;
    break;}
case 136:
#line 1092 "pic.y"
{
		  yyval.pair.x = (1.0 - yyvsp[-4].x)*yyvsp[-2].pair.x + yyvsp[-4].x*yyvsp[0].pair.x;
		  yyval.pair.y = (1.0 - yyvsp[-4].x)*yyvsp[-2].pair.y + yyvsp[-4].x*yyvsp[0].pair.y;
		;
    break;}
case 137:
#line 1097 "pic.y"
{
		  yyval.pair.x = (1.0 - yyvsp[-5].x)*yyvsp[-3].pair.x + yyvsp[-5].x*yyvsp[-1].pair.x;
		  yyval.pair.y = (1.0 - yyvsp[-5].x)*yyvsp[-3].pair.y + yyvsp[-5].x*yyvsp[-1].pair.y;
		;
    break;}
case 140:
#line 1110 "pic.y"
{ yyval.pair.x = yyvsp[-2].x; yyval.pair.y = yyvsp[0].x; ;
    break;}
case 141:
#line 1112 "pic.y"
{ yyval.pair = yyvsp[-1].pair; ;
    break;}
case 142:
#line 1117 "pic.y"
{ yyval.pl = yyvsp[0].pl; ;
    break;}
case 143:
#line 1119 "pic.y"
{
		  path pth(yyvsp[0].crn);
		  if (!pth.follow(yyvsp[-1].pl, & yyval.pl))
		    YYABORT;
		;
    break;}
case 144:
#line 1125 "pic.y"
{
		  path pth(yyvsp[-1].crn);
		  if (!pth.follow(yyvsp[0].pl, & yyval.pl))
		    YYABORT;
		;
    break;}
case 145:
#line 1131 "pic.y"
{
		  path pth(yyvsp[-2].crn);
		  if (!pth.follow(yyvsp[0].pl, & yyval.pl))
		    YYABORT;
		;
    break;}
case 146:
#line 1137 "pic.y"
{
		  yyval.pl.x = current_position.x;
		  yyval.pl.y = current_position.y;
		  yyval.pl.obj = 0;
		;
    break;}
case 147:
#line 1146 "pic.y"
{
		  place *p = lookup_label(yyvsp[0].str);
		  if (!p) {
		    lex_error("there is no place `%1'", yyvsp[0].str);
		    YYABORT;
		  }
		  yyval.pl = *p;
		  a_delete yyvsp[0].str;
		;
    break;}
case 148:
#line 1156 "pic.y"
{
		  yyval.pl.obj = yyvsp[0].obj;
		;
    break;}
case 149:
#line 1160 "pic.y"
{
		  path pth(yyvsp[0].str);
		  if (!pth.follow(yyvsp[-2].pl, & yyval.pl))
		    YYABORT;
		;
    break;}
case 150:
#line 1169 "pic.y"
{ yyval.n = yyvsp[0].n; ;
    break;}
case 151:
#line 1171 "pic.y"
{
		  // XXX Check for overflow (and non-integers?).
		  yyval.n = (int)yyvsp[-1].x;
		;
    break;}
case 152:
#line 1179 "pic.y"
{ yyval.n = 1; ;
    break;}
case 153:
#line 1181 "pic.y"
{ yyval.n = yyvsp[-1].n; ;
    break;}
case 154:
#line 1186 "pic.y"
{
		  int count = 0;
		  object *p;
		  for (p = olist.head; p != 0; p = p->next)
		    if (p->type() == yyvsp[0].obtype && ++count == yyvsp[-1].n) {
		      yyval.obj = p;
		      break;
		    }
		  if (p == 0) {
		    lex_error("there is no %1%2 %3", yyvsp[-1].n, ordinal_postfix(yyvsp[-1].n),
			      object_type_name(yyvsp[0].obtype));
		    YYABORT;
		  }
		;
    break;}
case 155:
#line 1201 "pic.y"
{
		  int count = 0;
		  object *p;
		  for (p = olist.tail; p != 0; p = p->prev)
		    if (p->type() == yyvsp[0].obtype && ++count == yyvsp[-1].n) {
		      yyval.obj = p;
		      break;
		    }
		  if (p == 0) {
		    lex_error("there is no %1%2 last %3", yyvsp[-1].n,
			      ordinal_postfix(yyvsp[-1].n), object_type_name(yyvsp[0].obtype));
		    YYABORT;
		  }
		;
    break;}
case 156:
#line 1219 "pic.y"
{ yyval.obtype = BOX_OBJECT; ;
    break;}
case 157:
#line 1221 "pic.y"
{ yyval.obtype = CIRCLE_OBJECT; ;
    break;}
case 158:
#line 1223 "pic.y"
{ yyval.obtype = ELLIPSE_OBJECT; ;
    break;}
case 159:
#line 1225 "pic.y"
{ yyval.obtype = ARC_OBJECT; ;
    break;}
case 160:
#line 1227 "pic.y"
{ yyval.obtype = LINE_OBJECT; ;
    break;}
case 161:
#line 1229 "pic.y"
{ yyval.obtype = ARROW_OBJECT; ;
    break;}
case 162:
#line 1231 "pic.y"
{ yyval.obtype = SPLINE_OBJECT; ;
    break;}
case 163:
#line 1233 "pic.y"
{ yyval.obtype = BLOCK_OBJECT; ;
    break;}
case 164:
#line 1235 "pic.y"
{ yyval.obtype = TEXT_OBJECT; ;
    break;}
case 165:
#line 1240 "pic.y"
{
		  yyval.pth = new path(yyvsp[0].str);
		;
    break;}
case 166:
#line 1244 "pic.y"
{
		  yyval.pth = yyvsp[-2].pth;
		  yyval.pth->append(yyvsp[0].str);
		;
    break;}
case 167:
#line 1252 "pic.y"
{
		  yyval.pth = new path(yyvsp[0].crn);
		;
    break;}
case 168:
#line 1259 "pic.y"
{
		  yyval.pth = yyvsp[0].pth;
		;
    break;}
case 169:
#line 1263 "pic.y"
{
		  yyval.pth = yyvsp[-1].pth;
		  yyval.pth->append(yyvsp[0].crn);
		;
    break;}
case 170:
#line 1271 "pic.y"
{
		  yyval.pth = yyvsp[0].pth;
		;
    break;}
case 171:
#line 1275 "pic.y"
{
		  yyval.pth = yyvsp[-3].pth;
		  yyval.pth->set_ypath(yyvsp[-1].pth);
		;
    break;}
case 172:
#line 1281 "pic.y"
{
		  lex_warning("`%1%2 last %3' in `with' argument ignored",
			      yyvsp[-3].n, ordinal_postfix(yyvsp[-3].n), object_type_name(yyvsp[-1].obtype));
		  yyval.pth = yyvsp[0].pth;
		;
    break;}
case 173:
#line 1287 "pic.y"
{
		  lex_warning("`last %1' in `with' argument ignored",
			      object_type_name(yyvsp[-1].obtype));
		  yyval.pth = yyvsp[0].pth;
		;
    break;}
case 174:
#line 1293 "pic.y"
{
		  lex_warning("`%1%2 %3' in `with' argument ignored",
			      yyvsp[-2].n, ordinal_postfix(yyvsp[-2].n), object_type_name(yyvsp[-1].obtype));
		  yyval.pth = yyvsp[0].pth;
		;
    break;}
case 175:
#line 1299 "pic.y"
{
		  lex_warning("initial `%1' in `with' argument ignored", yyvsp[-1].str);
		  a_delete yyvsp[-1].str;
		  yyval.pth = yyvsp[0].pth;
		;
    break;}
case 176:
#line 1308 "pic.y"
{ yyval.crn = &object::north; ;
    break;}
case 177:
#line 1310 "pic.y"
{ yyval.crn = &object::east; ;
    break;}
case 178:
#line 1312 "pic.y"
{ yyval.crn = &object::west; ;
    break;}
case 179:
#line 1314 "pic.y"
{ yyval.crn = &object::south; ;
    break;}
case 180:
#line 1316 "pic.y"
{ yyval.crn = &object::north_east; ;
    break;}
case 181:
#line 1318 "pic.y"
{ yyval.crn = &object:: south_east; ;
    break;}
case 182:
#line 1320 "pic.y"
{ yyval.crn = &object::north_west; ;
    break;}
case 183:
#line 1322 "pic.y"
{ yyval.crn = &object::south_west; ;
    break;}
case 184:
#line 1324 "pic.y"
{ yyval.crn = &object::center; ;
    break;}
case 185:
#line 1326 "pic.y"
{ yyval.crn = &object::start; ;
    break;}
case 186:
#line 1328 "pic.y"
{ yyval.crn = &object::end; ;
    break;}
case 187:
#line 1330 "pic.y"
{ yyval.crn = &object::north; ;
    break;}
case 188:
#line 1332 "pic.y"
{ yyval.crn = &object::south; ;
    break;}
case 189:
#line 1334 "pic.y"
{ yyval.crn = &object::west; ;
    break;}
case 190:
#line 1336 "pic.y"
{ yyval.crn = &object::east; ;
    break;}
case 191:
#line 1338 "pic.y"
{ yyval.crn = &object::north_west; ;
    break;}
case 192:
#line 1340 "pic.y"
{ yyval.crn = &object::south_west; ;
    break;}
case 193:
#line 1342 "pic.y"
{ yyval.crn = &object::north_east; ;
    break;}
case 194:
#line 1344 "pic.y"
{ yyval.crn = &object::south_east; ;
    break;}
case 195:
#line 1346 "pic.y"
{ yyval.crn = &object::west; ;
    break;}
case 196:
#line 1348 "pic.y"
{ yyval.crn = &object::east; ;
    break;}
case 197:
#line 1350 "pic.y"
{ yyval.crn = &object::north_west; ;
    break;}
case 198:
#line 1352 "pic.y"
{ yyval.crn = &object::south_west; ;
    break;}
case 199:
#line 1354 "pic.y"
{ yyval.crn = &object::north_east; ;
    break;}
case 200:
#line 1356 "pic.y"
{ yyval.crn = &object::south_east; ;
    break;}
case 201:
#line 1358 "pic.y"
{ yyval.crn = &object::center; ;
    break;}
case 202:
#line 1360 "pic.y"
{ yyval.crn = &object::start; ;
    break;}
case 203:
#line 1362 "pic.y"
{ yyval.crn = &object::end; ;
    break;}
case 204:
#line 1367 "pic.y"
{
		  if (!lookup_variable(yyvsp[0].str, & yyval.x)) {
		    lex_error("there is no variable `%1'", yyvsp[0].str);
		    YYABORT;
		  }
		  a_delete yyvsp[0].str;
		;
    break;}
case 205:
#line 1375 "pic.y"
{ yyval.x = yyvsp[0].x; ;
    break;}
case 206:
#line 1377 "pic.y"
{
		  if (yyvsp[-1].pl.obj != 0)
		    yyval.x = yyvsp[-1].pl.obj->origin().x;
		  else
		    yyval.x = yyvsp[-1].pl.x;
		;
    break;}
case 207:
#line 1384 "pic.y"
{
		  if (yyvsp[-1].pl.obj != 0)
		    yyval.x = yyvsp[-1].pl.obj->origin().y;
		  else
		    yyval.x = yyvsp[-1].pl.y;
		;
    break;}
case 208:
#line 1391 "pic.y"
{
		  if (yyvsp[-1].pl.obj != 0)
		    yyval.x = yyvsp[-1].pl.obj->height();
		  else
		    yyval.x = 0.0;
		;
    break;}
case 209:
#line 1398 "pic.y"
{
		  if (yyvsp[-1].pl.obj != 0)
		    yyval.x = yyvsp[-1].pl.obj->width();
		  else
		    yyval.x = 0.0;
		;
    break;}
case 210:
#line 1405 "pic.y"
{
		  if (yyvsp[-1].pl.obj != 0)
		    yyval.x = yyvsp[-1].pl.obj->radius();
		  else
		    yyval.x = 0.0;
		;
    break;}
case 211:
#line 1412 "pic.y"
{ yyval.x = yyvsp[-2].x + yyvsp[0].x; ;
    break;}
case 212:
#line 1414 "pic.y"
{ yyval.x = yyvsp[-2].x - yyvsp[0].x; ;
    break;}
case 213:
#line 1416 "pic.y"
{ yyval.x = yyvsp[-2].x * yyvsp[0].x; ;
    break;}
case 214:
#line 1418 "pic.y"
{
		  if (yyvsp[0].x == 0.0) {
		    lex_error("division by zero");
		    YYABORT;
		  }
		  yyval.x = yyvsp[-2].x/yyvsp[0].x;
		;
    break;}
case 215:
#line 1426 "pic.y"
{
		  if (yyvsp[0].x == 0.0) {
		    lex_error("modulus by zero");
		    YYABORT;
		  }
		  yyval.x = fmod(yyvsp[-2].x, yyvsp[0].x);
		;
    break;}
case 216:
#line 1434 "pic.y"
{
		  errno = 0;
		  yyval.x = pow(yyvsp[-2].x, yyvsp[0].x);
		  if (errno == EDOM) {
		    lex_error("arguments to `^' operator out of domain");
		    YYABORT;
		  }
		  if (errno == ERANGE) {
		    lex_error("result of `^' operator out of range");
		    YYABORT;
		  }
		;
    break;}
case 217:
#line 1447 "pic.y"
{ yyval.x = -yyvsp[0].x; ;
    break;}
case 218:
#line 1449 "pic.y"
{ yyval.x = yyvsp[-1].x; ;
    break;}
case 219:
#line 1451 "pic.y"
{
		  errno = 0;
		  yyval.x = sin(yyvsp[-1].x);
		  if (errno == ERANGE) {
		    lex_error("sin result out of range");
		    YYABORT;
		  }
		;
    break;}
case 220:
#line 1460 "pic.y"
{
		  errno = 0;
		  yyval.x = cos(yyvsp[-1].x);
		  if (errno == ERANGE) {
		    lex_error("cos result out of range");
		    YYABORT;
		  }
		;
    break;}
case 221:
#line 1469 "pic.y"
{
		  errno = 0;
		  yyval.x = atan2(yyvsp[-3].x, yyvsp[-1].x);
		  if (errno == EDOM) {
		    lex_error("atan2 argument out of domain");
		    YYABORT;
		  }
		  if (errno == ERANGE) {
		    lex_error("atan2 result out of range");
		    YYABORT;
		  }
		;
    break;}
case 222:
#line 1482 "pic.y"
{
		  errno = 0;
		  yyval.x = log10(yyvsp[-1].x);
		  if (errno == ERANGE) {
		    lex_error("log result out of range");
		    YYABORT;
		  }
		;
    break;}
case 223:
#line 1491 "pic.y"
{
		  errno = 0;
		  yyval.x = pow(10.0, yyvsp[-1].x);
		  if (errno == ERANGE) {
		    lex_error("exp result out of range");
		    YYABORT;
		  }
		;
    break;}
case 224:
#line 1500 "pic.y"
{
		  errno = 0;
		  yyval.x = sqrt(yyvsp[-1].x);
		  if (errno == EDOM) {
		    lex_error("sqrt argument out of domain");
		    YYABORT;
		  }
		;
    break;}
case 225:
#line 1509 "pic.y"
{ yyval.x = yyvsp[-3].x > yyvsp[-1].x ? yyvsp[-3].x : yyvsp[-1].x; ;
    break;}
case 226:
#line 1511 "pic.y"
{ yyval.x = yyvsp[-3].x < yyvsp[-1].x ? yyvsp[-3].x : yyvsp[-1].x; ;
    break;}
case 227:
#line 1513 "pic.y"
{ yyval.x = floor(yyvsp[-1].x); ;
    break;}
case 228:
#line 1515 "pic.y"
{ yyval.x = 1.0 + floor(((rand()&0x7fff)/double(0x7fff))*yyvsp[-1].x); ;
    break;}
case 229:
#line 1517 "pic.y"
{
		  /* return a random number in the range [0,1) */
		  /* portable, but not very random */
		  yyval.x = (rand() & 0x7fff) / double(0x8000);
		;
    break;}
case 230:
#line 1523 "pic.y"
{ yyval.x = 0; srand((unsigned int)yyvsp[-1].x); ;
    break;}
case 231:
#line 1525 "pic.y"
{ yyval.x = (yyvsp[-2].x < yyvsp[0].x); ;
    break;}
case 232:
#line 1527 "pic.y"
{ yyval.x = (yyvsp[-2].x <= yyvsp[0].x); ;
    break;}
case 233:
#line 1529 "pic.y"
{ yyval.x = (yyvsp[-2].x > yyvsp[0].x); ;
    break;}
case 234:
#line 1531 "pic.y"
{ yyval.x = (yyvsp[-2].x >= yyvsp[0].x); ;
    break;}
case 235:
#line 1533 "pic.y"
{ yyval.x = (yyvsp[-2].x == yyvsp[0].x); ;
    break;}
case 236:
#line 1535 "pic.y"
{ yyval.x = (yyvsp[-2].x != yyvsp[0].x); ;
    break;}
case 237:
#line 1537 "pic.y"
{ yyval.x = (yyvsp[-2].x != 0.0 && yyvsp[0].x != 0.0); ;
    break;}
case 238:
#line 1539 "pic.y"
{ yyval.x = (yyvsp[-2].x != 0.0 || yyvsp[0].x != 0.0); ;
    break;}
case 239:
#line 1541 "pic.y"
{ yyval.x = (yyvsp[0].x == 0.0); ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/bison/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 1545 "pic.y"


/* bison defines const to be empty unless __STDC__ is defined, which it
isn't under cfront */

#ifdef const
#undef const
#endif

static struct {
  const char *name;
  double val;
  int scaled;		     // non-zero if val should be multiplied by scale
} defaults_table[] = {
  { "arcrad", .25, 1 },
  { "arrowht", .1, 1 },
  { "arrowwid", .05, 1 },
  { "circlerad", .25, 1 },
  { "boxht", .5, 1 },
  { "boxwid", .75, 1 },
  { "boxrad", 0.0, 1 },
  { "dashwid", .05, 1 },
  { "ellipseht", .5, 1 },
  { "ellipsewid", .75, 1 },
  { "moveht", .5, 1 },
  { "movewid", .5, 1 },
  { "lineht", .5, 1 },
  { "linewid", .5, 1 },
  { "textht", 0.0, 1 },
  { "textwid", 0.0, 1 },
  { "scale", 1.0, 0 },
  { "linethick", -1.0, 0 },		// in points
  { "fillval", .5, 0 },
  { "arrowhead", 1.0, 0 },
  { "maxpswid", 8.5, 0 },
  { "maxpsht", 11.0, 0 },
};

place *lookup_label(const char *label)
{
  saved_state *state = current_saved_state;
  PTABLE(place) *tbl = current_table;
  for (;;) {
    place *pl = tbl->lookup(label);
    if (pl)
      return pl;
    if (!state)
      return 0;
    tbl = state->tbl;
    state = state->prev;
  }
}

void define_label(const char *label, const place *pl)
{
  place *p = new place;
  *p = *pl;
  current_table->define(label, p);
}

int lookup_variable(const char *name, double *val)
{
  place *pl = lookup_label(name);
  if (pl) {
    *val = pl->x;
    return 1;
  }
  return 0;
}

void define_variable(const char *name, double val)
{
  place *p = new place;
  p->obj = 0;
  p->x = val;
  p->y = 0.0;
  current_table->define(name, p);
  if (strcmp(name, "scale") == 0) {
    // When the scale changes, reset all scaled pre-defined variables to
    // their default values.
    for (int i = 0; i < sizeof(defaults_table)/sizeof(defaults_table[0]); i++) 
      if (defaults_table[i].scaled)
	define_variable(defaults_table[i].name, val*defaults_table[i].val);
  }
}

// called once only (not once per parse)

void parse_init()
{
  current_direction = RIGHT_DIRECTION;
  current_position.x = 0.0;
  current_position.y = 0.0;
  // This resets everything to its default value.
  reset_all();
}

void reset(const char *nm)
{
  for (int i = 0; i < sizeof(defaults_table)/sizeof(defaults_table[0]); i++)
    if (strcmp(nm, defaults_table[i].name) == 0) {
      double val = defaults_table[i].val;
      if (defaults_table[i].scaled) {
	double scale;
	lookup_variable("scale", &scale);
	val *= scale;
      }
      define_variable(defaults_table[i].name, val);
      return;
    }
  lex_error("`%1' is not a predefined variable", nm);
}

void reset_all()
{
  // We only have to explicitly reset the pre-defined variables that
  // aren't scaled because `scale' is not scaled, and changing the
  // value of `scale' will reset all the pre-defined variables that
  // are scaled.
  for (int i = 0; i < sizeof(defaults_table)/sizeof(defaults_table[0]); i++)
    if (!defaults_table[i].scaled)
      define_variable(defaults_table[i].name, defaults_table[i].val);
}

// called after each parse

void parse_cleanup()
{
  while (current_saved_state != 0) {
    delete current_table;
    current_table = current_saved_state->tbl;
    saved_state *tem = current_saved_state;
    current_saved_state = current_saved_state->prev;
    delete tem;
  }
  assert(current_table == &top_table);
  PTABLE_ITERATOR(place) iter(current_table);
  const char *key;
  place *pl;
  while (iter.next(&key, &pl))
    if (pl->obj != 0) {
      position pos = pl->obj->origin();
      pl->obj = 0;
      pl->x = pos.x;
      pl->y = pos.y;
    }
  while (olist.head != 0) {
    object *tem = olist.head;
    olist.head = olist.head->next;
    delete tem;
  }
  olist.tail = 0;
  current_direction = RIGHT_DIRECTION;
  current_position.x = 0.0;
  current_position.y = 0.0;
}

const char *ordinal_postfix(int n)
{
  if (n < 10 || n > 20)
    switch (n % 10) {
    case 1:
      return "st";
    case 2:
      return "nd";
    case 3:
      return "rd";
    }
  return "th";
}

const char *object_type_name(object_type type)
{
  switch (type) {
  case BOX_OBJECT:
    return "box";
  case CIRCLE_OBJECT:
    return "circle";
  case ELLIPSE_OBJECT:
    return "ellipse";
  case ARC_OBJECT:
    return "arc";
  case SPLINE_OBJECT:
    return "spline";
  case LINE_OBJECT:
    return "line";
  case ARROW_OBJECT:
    return "arrow";
  case MOVE_OBJECT:
    return "move";
  case TEXT_OBJECT:
    return "\"\"";
  case BLOCK_OBJECT:
    return "[]";
  case OTHER_OBJECT:
  case MARK_OBJECT:
  default:
    break;
  }
  return "object";
}

static char sprintf_buf[1024];

char *format_number(const char *form, double n)
{
  if (form == 0)
    form = "%g";
  else {
    // this is a fairly feeble attempt at validation of the format
    int nspecs = 0;
    for (const char *p = form; *p != '\0'; p++)
      if (*p == '%') {
	if (p[1] == '%')
	  p++;
	else
	  nspecs++;
      }
    if (nspecs > 1) {
      lex_error("bad format `%1'", form);
      return strsave(form);
    }
  }
  sprintf(sprintf_buf, form, n);
  return strsave(sprintf_buf);
}

char *do_sprintf(const char *form, const double *v, int nv)
{
  string result;
  int i = 0;
  string one_format;
  while (*form) {
    if (*form == '%') {
      one_format += *form++;
      for (; *form != '\0' && strchr("#-+ 0123456789.", *form) != 0; form++)
	one_format += *form;
      if (*form == '\0' || strchr("eEfgG%", *form) == 0) {
	lex_error("bad sprintf format");
	result += one_format;
	result += form;
	break;
      }
      if (*form == '%') {
	one_format += *form++;
	one_format += '\0';
	sprintf(sprintf_buf, one_format.contents());
      }
      else {
	if (i >= nv) {
	  lex_error("too few arguments to sprintf");
	  result += one_format;
	  result += form;
	  break;
	}
	one_format += *form++;
	one_format += '\0';
	sprintf(sprintf_buf, one_format.contents(), v[i++]);
      }
      one_format.clear();
      result += sprintf_buf;
    }
    else
      result += *form++;
  }
  result += '\0';
  return strsave(result.contents());
}
