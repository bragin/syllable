diff -ur grub-0.97_orig/configure.ac grub-0.97/configure.ac
--- grub-0.97_orig/configure.ac	2005-05-08 02:36:03.000000000 +0000
+++ grub-0.97/configure.ac	2006-10-26 10:21:52.000000000 +0000
@@ -158,8 +158,7 @@
 fi
 
 # Defined in acinclude.m4.
-grub_ASM_USCORE
-grub_PROG_OBJCOPY_ABSOLUTE
+grub_cv_prog_objcopy_absolute=yes
 if test "x$grub_cv_prog_objcopy_absolute" != xyes; then
   AC_MSG_ERROR([GRUB requires a working absolute objcopy; upgrade your binutils])
 fi
@@ -291,6 +290,13 @@
   FSYS_CFLAGS="$FSYS_CFLAGS -DFSYS_ISO9660=1"
 fi
 
+AC_ARG_ENABLE(afs,
+  [  --disable-afs           disable AtheOS AFS support in Stage 2])
+
+if test x"$enable_afs" != xno; then
+  FSYS_CFLAGS="$FSYS_CFLAGS -DFSYS_AFS=1"
+fi
+
 dnl AC_ARG_ENABLE(tftp,
 dnl [  --enable-tftp           enable TFTP support in Stage 2])
 dnl 
diff -ur grub-0.97_orig/lib/device.c grub-0.97/lib/device.c
--- grub-0.97_orig/lib/device.c	2005-03-27 23:14:25.000000000 +0000
+++ grub-0.97/lib/device.c	2006-10-26 10:21:52.000000000 +0000
@@ -306,6 +306,16 @@
 #elif defined(__QNXNTO__)
   /* QNX RTP */
   sprintf (name, "/dev/fd%d", unit);
+#elif defined(__SYLLABLE__)
+  /* Syllable */
+# if 0
+  /* XXXKV: In theory this is simple enough, but GRUB uses an ioctl() on the device that
+     causes the driver to crash.  Don't re-enable this until the driver is fixed. */ 
+  sprintf (name, "/dev/disk/bios/fd%c/raw", 'a' + unit );*/
+# else
+# warning "BIOS floppy drives cannot be probed on Syllable."
+  *name = 0;
+# endif
 #else
 # warning "BIOS floppy drives cannot be guessed in your operating system."
   /* Set NAME to a bogus string.  */
@@ -347,6 +357,9 @@
   /* Actually, QNX RTP doesn't distinguish IDE from SCSI, so this could
      contain SCSI disks.  */
   sprintf (name, "/dev/hd%d", unit);
+#elif defined(__SYLLABLE__)
+  /* Syllable */
+  sprintf (name, "/dev/disk/ata/hd%c/raw", 'a' + unit );
 #else
 # warning "BIOS IDE drives cannot be guessed in your operating system."
   /* Set NAME to a bogus string.  */
@@ -388,6 +401,9 @@
   /* QNX RTP doesn't distinguish SCSI from IDE, so it is better to
      disable the detection of SCSI disks here.  */
   *name = 0;
+#elif defined(__SYLLABLE__)
+  /* Syllable */
+  sprintf (name, "/dev/disk/scsi/hd%c/raw", 'a' + unit );
 #else
 # warning "BIOS SCSI drives cannot be guessed in your operating system."
   /* Set NAME to a bogus string.  */
@@ -445,7 +461,7 @@
       /* Error opening the device.  */
       return 0;
     }
-  
+
   /* Make sure CD-ROMs don't get assigned a BIOS disk number 
      before SCSI disks!  */
 #ifdef __linux__
@@ -477,7 +493,7 @@
     return 0;
 # endif /* CDIOCCLRDEBUG */
 #endif /* __FreeBSD_kernel__ || __NetBSD__ || __OpenBSD__ */
-  
+
   /* Attempt to read the first sector.  */
   if (fread (buf, 1, 512, fp) != 512)
     {
diff -ur grub-0.97_orig/stage1/Makefile.am grub-0.97/stage1/Makefile.am
--- grub-0.97_orig/stage1/Makefile.am	2004-07-16 11:44:56.000000000 +0000
+++ grub-0.97/stage1/Makefile.am	2006-10-26 10:21:52.000000000 +0000
@@ -2,6 +2,7 @@
 nodist_pkglib_DATA = stage1
 
 CLEANFILES = $(nodist_pkglib_DATA)
+AM_CFLAGS = -specs=../bodge-specs
 
 # We can't use builtins or standard includes.
 AM_CCASFLAGS = $(STAGE1_CFLAGS) -fno-builtin -nostdinc
diff -ur grub-0.97_orig/stage2/Makefile.am grub-0.97/stage2/Makefile.am
--- grub-0.97_orig/stage2/Makefile.am	2005-02-02 20:37:35.000000000 +0000
+++ grub-0.97/stage2/Makefile.am	2006-10-26 10:21:52.000000000 +0000
@@ -1,3 +1,5 @@
+AM_CFLAGS = -specs=../bodge-specs
+
 # For test target.
 TESTS = size_test
 noinst_SCRIPTS = $(TESTS)
@@ -7,7 +9,7 @@
         fat.h filesys.h freebsd.h fs.h hercules.h i386-elf.h \
 	imgact_aout.h iso9660.h jfs.h mb_header.h mb_info.h md5.h \
 	nbi.h pc_slice.h serial.h shared.h smp-imps.h term.h \
-	terminfo.h tparm.h nbi.h ufs2.h vstafs.h xfs.h
+	terminfo.h tparm.h nbi.h ufs2.h vstafs.h xfs.h afs.h
 EXTRA_DIST = setjmp.S apm.S $(noinst_SCRIPTS)
 
 # For <stage1.h>.
@@ -18,12 +20,12 @@
 libgrub_a_SOURCES = boot.c builtins.c char_io.c cmdline.c common.c \
 	disk_io.c fsys_ext2fs.c fsys_fat.c fsys_ffs.c fsys_iso9660.c \
 	fsys_jfs.c fsys_minix.c fsys_reiserfs.c fsys_ufs2.c \
-	fsys_vstafs.c fsys_xfs.c gunzip.c md5.c serial.c stage2.c \
+	fsys_vstafs.c fsys_xfs.c fsys_afs.c gunzip.c md5.c serial.c stage2.c \
 	terminfo.c tparm.c
 libgrub_a_CFLAGS = $(GRUB_CFLAGS) -I$(top_srcdir)/lib \
 	-DGRUB_UTIL=1 -DFSYS_EXT2FS=1 -DFSYS_FAT=1 -DFSYS_FFS=1 \
 	-DFSYS_ISO9660=1 -DFSYS_JFS=1 -DFSYS_MINIX=1 -DFSYS_REISERFS=1 \
-	-DFSYS_UFS2=1 -DFSYS_VSTAFS=1 -DFSYS_XFS=1 \
+	-DFSYS_UFS2=1 -DFSYS_VSTAFS=1 -DFSYS_XFS=1 -DFSYS_AFS=1 \
 	-DUSE_MD5_PASSWORDS=1 -DSUPPORT_SERIAL=1 -DSUPPORT_HERCULES=1
 
 # Stage 2 and Stage 1.5's.
@@ -35,23 +37,24 @@
 pkglib_DATA = stage2 stage2_eltorito e2fs_stage1_5 fat_stage1_5 \
 	ffs_stage1_5 iso9660_stage1_5 jfs_stage1_5 minix_stage1_5 \
 	reiserfs_stage1_5 ufs2_stage1_5 vstafs_stage1_5 xfs_stage1_5 \
-	nbgrub pxegrub
+	afs_stage1_5 nbgrub pxegrub
 noinst_DATA = pre_stage2 start start_eltorito nbloader pxeloader diskless
 noinst_PROGRAMS = pre_stage2.exec start.exec start_eltorito.exec \
 	e2fs_stage1_5.exec fat_stage1_5.exec ffs_stage1_5.exec \
 	iso9660_stage1_5.exec jfs_stage1_5.exec minix_stage1_5.exec \
 	reiserfs_stage1_5.exec ufs2_stage1_5.exec vstafs_stage1_5.exec \
-	xfs_stage1_5.exec nbloader.exec pxeloader.exec diskless.exec
+	xfs_stage1_5.exec afs_stage1_5.exec nbloader.exec pxeloader.exec diskless.exec
 else
 pkglib_DATA = stage2 stage2_eltorito e2fs_stage1_5 fat_stage1_5 \
 	ffs_stage1_5 iso9660_stage1_5 jfs_stage1_5 minix_stage1_5 \
-	reiserfs_stage1_5 ufs2_stage1_5 vstafs_stage1_5 xfs_stage1_5
+	reiserfs_stage1_5 ufs2_stage1_5 vstafs_stage1_5 xfs_stage1_5 \
+	afs_stage1_5
 noinst_DATA = pre_stage2 start start_eltorito
 noinst_PROGRAMS = pre_stage2.exec start.exec start_eltorito.exec \
 	e2fs_stage1_5.exec fat_stage1_5.exec ffs_stage1_5.exec \
 	iso9660_stage1_5.exec jfs_stage1_5.exec minix_stage1_5.exec \
 	reiserfs_stage1_5.exec ufs2_stage1_5.exec vstafs_stage1_5.exec \
-	xfs_stage1_5.exec
+	xfs_stage1_5.exec afs_stage1_5.exec
 endif
 MOSTLYCLEANFILES = $(noinst_PROGRAMS)
 
@@ -89,7 +92,7 @@
 pre_stage2_exec_SOURCES = asm.S bios.c boot.c builtins.c char_io.c \
 	cmdline.c common.c console.c disk_io.c fsys_ext2fs.c \
 	fsys_fat.c fsys_ffs.c fsys_iso9660.c fsys_jfs.c fsys_minix.c \
-	fsys_reiserfs.c fsys_ufs2.c fsys_vstafs.c fsys_xfs.c gunzip.c \
+	fsys_reiserfs.c fsys_ufs2.c fsys_vstafs.c fsys_xfs.c fsys_afs.c gunzip.c \
 	hercules.c md5.c serial.c smp-imps.c stage2.c terminfo.c tparm.c
 pre_stage2_exec_CFLAGS = $(STAGE2_COMPILE) $(FSYS_CFLAGS)
 pre_stage2_exec_CCASFLAGS = $(STAGE2_COMPILE) $(FSYS_CFLAGS)
@@ -226,6 +229,15 @@
 	-DNO_BLOCK_FILES=1
 iso9660_stage1_5_exec_LDFLAGS = $(STAGE1_5_LINK)
 
+# For afs_stage1_5 target.
+afs_stage1_5_exec_SOURCES = start.S asm.S common.c char_io.c \
+	disk_io.c stage1_5.c fsys_afs.c bios.c
+afs_stage1_5_exec_CFLAGS = $(STAGE1_5_COMPILE) -DFSYS_AFS=1 \
+	-DNO_BLOCK_FILES=1
+afs_stage1_5_exec_CCASFLAGS = $(STAGE1_5_COMPILE) -DFSYS_AFS=1 \
+	-DNO_BLOCK_FILES=1
+afs_stage1_5_exec_LDFLAGS = $(STAGE1_5_LINK)
+
 # For diskless target.
 diskless_exec_SOURCES = $(pre_stage2_exec_SOURCES)
 diskless_exec_CFLAGS = $(STAGE2_COMPILE) $(FSYS_CFLAGS) \
diff -ur grub-0.97_orig/stage2/bios.c grub-0.97/stage2/bios.c
--- grub-0.97_orig/stage2/bios.c	2004-03-27 16:34:04.000000000 +0000
+++ grub-0.97/stage2/bios.c	2006-10-26 10:23:40.000000000 +0000
@@ -147,6 +147,7 @@
   grub_memset (&cdrp, 0, sizeof (cdrp));
   cdrp.size = sizeof (cdrp) - sizeof (cdrp.dummy);
   err = biosdisk_int13_extensions (0x4B01, drive, &cdrp);
+  err = 0; /* really ugly hack to circumvent faulty BIOS versions like Acer 292LMi */
   if (! err && cdrp.drive_no == drive)
     {
       if ((cdrp.media_type & 0x0F) == 0)
diff -ur grub-0.97_orig/stage2/builtins.c grub-0.97/stage2/builtins.c
--- grub-0.97_orig/stage2/builtins.c	2005-02-15 21:58:23.000000000 +0000
+++ grub-0.97/stage2/builtins.c	2006-10-26 10:21:52.000000000 +0000
@@ -3881,7 +3881,8 @@
     {"minix",    "/minix_stage1_5"},
     {"reiserfs", "/reiserfs_stage1_5"},
     {"vstafs",   "/vstafs_stage1_5"},
-    {"xfs",      "/xfs_stage1_5"}
+    {"xfs",      "/xfs_stage1_5"},
+    {"afs",      "/afs_stage1_5"}
   };
 
   tmp_drive = saved_drive;
@@ -4002,7 +4003,8 @@
 		{
 		  grub_strcpy (real_config_filename, config_filename);
 		  sprint_device (image_drive, image_partition);
-		  grub_sprintf (config_filename, "%s%s", device, stage2);
+		  /*grub_sprintf (config_filename, "%s%s", device, stage2);*/
+		  grub_sprintf (config_filename, "%s%s%s", device, prefix, "/stage2");
 		  grub_strcpy (stage2, buffer);
 		}
 	    }
diff -ur grub-0.97_orig/stage2/disk_io.c grub-0.97/stage2/disk_io.c
--- grub-0.97_orig/stage2/disk_io.c	2004-05-23 16:35:24.000000000 +0000
+++ grub-0.97/stage2/disk_io.c	2006-10-26 10:21:52.000000000 +0000
@@ -78,6 +78,9 @@
 # ifdef FSYS_ISO9660
   {"iso9660", iso9660_mount, iso9660_read, iso9660_dir, 0, 0},
 # endif
+# ifdef FSYS_AFS
+  {"afs", afs_mount, afs_read, afs_dir, 0, afs_embed},
+# endif
   /* XX FFS should come last as it's superblock is commonly crossing tracks
      on floppies from track 1 to 2, while others only use 1.  */
 # ifdef FSYS_FFS
diff -ur grub-0.97_orig/stage2/filesys.h grub-0.97/stage2/filesys.h
--- grub-0.97_orig/stage2/filesys.h	2004-05-14 19:36:43.000000000 +0000
+++ grub-0.97/stage2/filesys.h	2006-10-26 10:21:52.000000000 +0000
@@ -105,6 +105,16 @@
 #define FSYS_XFS_NUM 0
 #endif
 
+#ifdef FSYS_AFS
+#define FSYS_AFS_NUM 1
+int afs_mount (void);
+int afs_read (char *buf, int len);
+int afs_dir (char *dirname);
+int afs_embed (int *start_sector, int needed_sectors );
+#else
+#define FSYS_AFS_NUM 0
+#endif
+
 #ifdef FSYS_TFTP
 #define FSYS_TFTP_NUM 1
 int tftp_mount (void);
@@ -128,7 +138,7 @@
 #define NUM_FSYS	\
   (FSYS_FFS_NUM + FSYS_FAT_NUM + FSYS_EXT2FS_NUM + FSYS_MINIX_NUM	\
    + FSYS_REISERFS_NUM + FSYS_VSTAFS_NUM + FSYS_JFS_NUM + FSYS_XFS_NUM	\
-   + FSYS_TFTP_NUM + FSYS_ISO9660_NUM + FSYS_UFS2_NUM)
+   + FSYS_AFS_NUM + FSYS_TFTP_NUM + FSYS_ISO9660_NUM + FSYS_UFS2_NUM)
 #endif
 
 /* defines for the block filesystem info area */
diff -ur grub-0.97_orig/stage2/shared.h grub-0.97/stage2/shared.h
--- grub-0.97_orig/stage2/shared.h	2004-06-19 16:40:09.000000000 +0000
+++ grub-0.97/stage2/shared.h	2006-10-26 10:21:52.000000000 +0000
@@ -212,6 +212,7 @@
 #define STAGE2_ID_XFS_STAGE1_5		8
 #define STAGE2_ID_ISO9660_STAGE1_5	9
 #define STAGE2_ID_UFS2_STAGE1_5		10
+#define STAGE2_ID_AFS_STAGE1_5		11
 
 #ifndef STAGE1_5
 # define STAGE2_ID	STAGE2_ID_STAGE2
@@ -236,6 +237,8 @@
 #  define STAGE2_ID	STAGE2_ID_ISO9660_STAGE1_5
 # elif defined(FSYS_UFS2)
 #  define STAGE2_ID	STAGE2_ID_UFS2_STAGE1_5
+# elif defined(FSYS_AFS)
+#  define STAGE2_ID	STAGE2_ID_AFS_STAGE1_5
 # else
 #  error "unknown Stage 2"
 # endif
