* November 14 2004, Jake Hamby *

  fatfs:
    Display short filenames correctly as upper- or lowercase using flags set
    by Windows.  All filenames should now display with the correct case.

  kernel:
    Updated BogoMIPS calculation and udelay.c from Linux for slightly greater
    accuracy.  Updated init.c to use segment constants (CS_KERNEL, DS_KERNEL)
    instead of magic numbers.  Updated init_e820_memory_map() to print the
    memory map returned by the BIOS.  Fixed a few spelling errors.  Added
    a few signals to <posix/signal.h> for POSIX completeness.

* November 7 2004, Jake Hamby *

Fixed a bug in restoring the FPU registers on returning from a signal
handler.  Also, if the process hasn't used the FPU, save_i387() will
return 0, causing AddSigHandlerFrame() to clear the FPU state pointer so
that on returning from the signal, restore_i387() isn't called.

* November 7 2004, Jake Hamby *

Update sys_kill() to verify that the real or effective user ID of the
calling process matches either the real or saved user ID of the receiving
process, or the caller is root, or the calling process is sending SIGCONT to
a process with the same session ID (to allow job control of setuid programs).
In order for a process to send SIGCHLD to its parent on exit, regardless of
user ID, do_exit() now uses send_signal() with the third argument set to true
instead of sys_kill().  Several other places have been changed to use
send_signal() as an optimization when permissions don't need to be checked.

The rather complicated code to transform the floating-point state to and
from the format used by the signal handler stack frame has now been moved to
a separate file, save_i387.c, to avoid cluttering up psignals.c.

* November 7 2004, Jake Hamby *

Fix fault.c to send SIGSEGV, SIGFPE, and SIGILL signals to the faulting thread
instead of to all threads.  Fixed ExceptionHand() to kill the thread causing
the exception with SIGSEGV (this required moving the exception handler stubs
exc1(), exc2(), etc. from intel.s to syscall.s).

Apparently Intel processors generate an external IRQ 13 *in addition to*
the native INT 16 math error reporting mechanism (even though I set the NE
bit in CR0 in both intel.s and ap_entry_proc()) so I had to add an IRQ 13
handler in irq.c to clear the 8259A.  The proper fix is to mask IRQ 13 in
the 8259A but I don't know enough about the 8259A code to do this.  This
only affects programs which explicitly enable exceptions for divide-by-zero
or other errors, e.g. with the feenableexcept() function that is currently
missing from Syllable's math library anyway.

* November 6 2004, Jake Hamby *

Implement lazy FPU save/restore for faster context switching and save the
state of XMM registers on Pentium3 and above for SSE support.  Exception
handlers in fault.c send signals (SIGSEGV, SIGFPE, SIGILL) rather than
exiting the process.  Spelling fixes in comments.  The function
is_signals_pending() is now correctly spelled is_signal_pending(). The new
SeqLock_s type from Linux is used in timer.c for reading the timer
registers without disabling interrupts, and the "inc/io_ports.h" header
defines constants for the PIC I/O ports, which are used for readability in
irq.c, smp.c and timer.c.  Other minor cleanups include removing useless
statistical counters from array.c, adding a warning to kmalloc() when 128K
or larger allocations are made, modifying bcache.c to use an area instead
of kmalloc() for its hashtable, using g_sSemListSpinLock instead of
g_sSchedSpinLock in sema.c, a new do_free_pages() function in mman.c that
doesn't call flush_tlb_global() (used in loops by areas.c), inlined asm
functions in "inc/intel.h" and atheos/kernel.h, and updated macros from
Linux for atheos/isa_io.h.  "macros.h" now uses a macro called __likely()
on GCC 3.0 and above as a hint to the compiler in kassertw() that the
expression asserted is expected to be true.

NOTE: You should install the new header files from the sys/include directory
with "make dist" and then rebuild your drivers along with the kernel.

* October 24 2004, Kristian Van Der Vliet *

A series of patches from Jake Hamby <jhamby@anobject.com> which changes the
atomic_t primitives:
	o Replaced the primitives in atheos/atomic.h with versions based on Linux 
	  2.6.8's include/asm-i386/atomic.h.
	o Replaced occurrences of atomic_add(&foo, 1) and atomic_add(&foo, -1) with 
	  atomic_inc(&foo) and atomic_dec(&foo), which are slightly faster and more
	  self-explanatory.
	o Many of the drivers were Linux ports that used the atomic_*() macros
	  properly; comment out the compatibility macros in "linuxcomp.h"
	o Fixed a few typos and changed kernel/debug.c to use ints instead 
	  of floats.

The following components are effected:

* kernel
* afs
* fatfs
* iso9660
* libsyllable
* appserver
* bus/ata
* bus/pci
* bus/scsi
* bus/usb
* disk/bios
* disk/usb
* graphics/geforcefx
* usb_ehci
* usb_ohci
* usb_uhci
* keyboard driver (kbd)
* ps2aux
* apm
* w8378x
* net/3c509
* net/eepro100
* sound/emu10k1
* sound/es1370
* sound/es1371
* sound/i810
* sound/sbpro
* sound/trident
* sound/via686a
* sound/vt82xx
* sound/ymfpci

* October 20 2004, Kristian Van Der Vliet *

A minor patch to kernel/debug.c which fixes the code to work properly if
your client sends <CR>, <CR><LF>, or <CR><NUL> for newline.  This patch is
intended to allow the use of a Telnet client as a debug terminal in conjunction
with VMWare.  See the VMWare FAQ for more information.  Patch from
Jake Hamby <jhamby@anobject.com>

* October 20 2004, Kristian Van Der Vliet *

read_cpu_id() was modifying %ebx but didn't tell GCC.  Patch from
Jake Hamby <jhamby@anobject.com>

* October 13 2004, Kristian Van Der Vliet *

Fixed a possible race condition in devices.c/register_device()  Spotted by
Peter Skerl <skerl@chello.at>

* October 10 2004, Kristian Van Der Vliet *

A whole bunch of patches from Jake Hamby <jhamby@anobject.com>

	o Minor stylistic fixes:
		* Added "-Wstrict-prototypes" to the Makefile and corrected some warnings
		  where functions were declared as "foo()" instead of "foo(void)" as is
		  correct for ANSI C.
		* I commented out some local functions which were not being used, removing
		  the remaining GCC warnings
		* Fixed a typo ("deamon" -> "daemon") in kernel/swap.c
		* Fixed panic() in to use the va_list macros instead of pointer arithmetic. 
	o Fix to allow the kernel to build with -O2 instead of -O3
		* Changed Fork() to a static inline function and commented out the prototype
		  in include/atheos/kernel.h. 
	o Upgrade the assembly macros in string.h to the versions in Linux 2.6.8
		* Removed "cld" instructions from most macros.  They shouldn't be 
		  necessary as every occurrence of "std" is immediately followed by "cld".
		* Changed function macros from "extern inline" to "static inline". 
		* Removed the alternate versions of strcat() and strncat().  Changed a 
		  value from "0xffffffff" to "0xffffffffu" which perhaps was causing a bug 
		  in the original versions.
		* memmove() now calls memcpy() if possible (changed in Linux 2.6.x).
		* Added an assembly version of strstr(), not inline but in kernel/lib/strstr.c
		  (and added to Makefile).
	o Fix a GCC warning in lib/vsprintf.c
		* va_arg functions can't pass floats (they are promoted to double) or 
		  short int (promoted to int).  I fixed the "%hd" code based on the Linux 
		  version and commented out the "%f" handling altogether as the kernel 
		 really should be avoiding floating point usage.

Including in this changeset are a few minor changes by myself:

	o Changed the Makefile to use "-O2 -mpreferred-stack-boundary=2" instead of -O3
	o Strip all symbols from kernel.so by default with the "make install" target

---- 0.5.4 Released -------------------------------------------------------------------

* September 24 2004, Kristian Van Der Vliet *

Complete strace rewrite.  The new strace() is a table driven function which is much easier
to keep upto date.  set_strace_level() has been removed (Breaking binary compatability with
any code that calls set_strace_level()) and a new syscall strace() replaces it.

All current syscalls are now understood by handle_strace() and the syscalls have
been grouped by function.  strace can be set to trace only functions within specified groups.
Two new syscalls, strace_exclude() and strace_include() allow specific syscalls to be
excluded or included in the trace.

A new file, ptrace.c, has been added as a syscall stub for an eventual ptrace()
implementation.

* August 4 2004, Kristian Van Der Vliet *

Streamlined find_boot_dev() which doesn't need to be so complex with the new ATAPI stuff.

---- 0.5.3 Released -------------------------------------------------------------------

* April 25 2004, Kristian Van Der Vliet *

Public Message Ports list handling fixes by Arno.

* Mrt 10 2004, Kaj de Vos *

Became a kernel hacker by fixing some spelling mistakes. :-)

* Feb 11 2004, Kristian Van Der Vliet *

The ELF loader memmap_instance() now "ignores" any text segments which might occure between the first
and last data segments.  Any non-data segments inside of data segments will become part of the data
segment.  This shouldn't be an issue for the majority of libraries and executables but it is required
in order to load Glibc 2.3.2 libc.so.2

* Feb 1 2004, Kristian Van Der Vliet *

Patch PCI bus manager so that it can detect the (buggy) PCI controller emulated by
Microsoft Virtual PC.

* Jan 11 2004, Kristian Van Der Vliet *

Fixes to enable_bus_master() in PCI bus manager & a bug fix in pci.h from Hilary Cheng
<tinyobject@yahoo.com>

* Dec 21 2003, Arno Klenke *

Updated elf loader to load binaries that have been created by binutils 2.14 or/and gcc 3.3.2
A gcc3 fix for timer.c
Added -fno-strict-aliasing to the CFLAGS of the makefile
Change to the standard elf linker map
Some small fixes to avoid warnings 

* Dec 2 2003, Henrik Isaksson *

Checked in some drivers I forgot yesterday...

* Dec 1 2003, Henrik Isaksson *

Changed the psuedo-random number generator to a "Mersenne Twister", that
should give a lot more randomness.

Applied Arno's patches:

Kernel:

o Added a get_area_physical_address() function that returns the physical
  start address of one area.
o A lock for protecting the devices list has been added.
o Fixed the remove_driver() function in the USB busmanager.

GeForce FX driver:

o Ported the GeForce FX specific code of the current XFree86 driver into
  a Syllable GeForce FX driver. This was necessary, because the access to
  the engine registers using the fifo, that is used in the current
  Syllable nvidia driver does not work anymore. You have to use a command
  buffer instead.
o The driver supports all accelerated functions (BltBitmap, FillRect,
  DrawLine, hardware cursor, video overlays ).
o All drawing operations and framebuffer accesses are first done in an
  offscreen buffer. A seperate driver thread copies this data into the
  visible area on v-blank. This  seems to make scrolling a lot smoother.
o I tried to implement DMA copies to the overlay memory, but this caused
  problems and so this code is disabled for now.

* Nov 30 2003, Henrik Isaksson *

o Public/private state for message ports is now represented by one bit only.
  (MSG_PORT_PUBLIC)

* Okt 29 2003, Arno Klenke *

Updated device driver documentation.

* Okt 28 2003, Arno Klenke *

Fixed some bugs in the USB busmanager & in the USB UHCI driver.
Added first version of the USB mass storage driver.

* Sept 30 2003, Kristian Van Der Vliet *

Small bug fix to get_device_info()

* Sept 21 2003, Kristian Van Der Vliet *

PCI & USB bus managers and some new drivers by Arno Klenke
<arno_klenke@yahoo.de>  The full changes are:

o Busmanager management
o Devices management + some changed to the dev fs
o Kernel configfile
  o A new kernel paramater (disable_config) to disable the configfile access.
     This is probably necessary when booting from a read-only volume
     (E.g. CDROM ).
o All drivers have been ported to the changed APIs
o Fixed some of the drivers makefiles so that make clean really removes
  all binary stuff
o The alloc_physical() function:
 o The memory allocator has been re-written for the realmode memory to also be
    useful for memory region allocations.
 o The kernel reserves the region used by the RAM and tries to use the e820
    function of the BIOS to reserve the other regions (e.g. ACPI). The PCI busmanager
    also reserves the memory of the PCI devices.

The following new drivers have been added:

o PCI busmanager
o USB busmanager
o USB UHCI driver
o USB mouse driver
o VIA LAN driver

* Sept 13 2003, Kristian Van Der Vliet *

Combined networking patch from William Rose <wrose@zip-it.org>

This patch comes in a few parts:
  o reader-writer locks
  o network utility updates
    o changed command-line syntax of ifconfig and route to support CIDR
    o changed output of both to be clearer (IMO) and support new networking features

  o networking patches
    o changes to implement reader-writer locking on network interface and route table
       (also includes garbage collection for these structures).
    o implement adding and deleting interfaces
    o introduce automatic local network routes for interfaces
    o add support for binding to a specific device to bypass routing

dhcpc has been updated to reflect the changes.

* Sept 13 2003, Kristian Van Der Vliet *

select() patch from William Rose <wrose@zip-it.org>  This patch updates the VFS code to
add a cookie parameter to the add_select_req and rem_select_req primitives.  It breaks binary
compatibility with filesystems that support these primitives.  The only ones to date are special
filesystems: e.g. dev, fifo, pty and socket  Corrections for these are included in the patch.  AFS
et al are not affected.

Once installed, using select() on the file descriptor obtained using open() on a device node
will now correctly pass through the select request to the underlying driver, rather than just
returning instantly.  This can be used to implement non-blocking device I/O.

* Sept 11 2003, Kristian Van Der Vliet *

Add support for the MSG_PEEK flag in tcp.c tcp_recvmsg()

* Sept 01 2003, Kristian Van Der Vliet *

The kernel version information has now been changed.  The kernel itself now sets the
system name and CPU type, as apposed to Glibc.  Changes have been made to Glibc uname.c
to reflect these changes, and the version and revision fields have been split into two
distinct fields (Which now contain valid data).  Sample output of uname -a is:

[root@hostname:~]uname -a
syllable liqwyd.domain 0 0.5 i586 unknown

* Aug 7 2003, Kristian Van Der Vliet *

Applied the GNU Indent styleguide script to all of the kernel source files and applied
a patch to the Makefile which fixes subsequent problems with generating the
kernel.exports.c file with the GNU Indent changes applied.

* Jul 16 2003, Kristian Van Der Vliet *

Patches from Arno Klenke <arno_klenke@yahoo.de>
	* New PCI module which no longer requires a PCI BIOS to function.
	* CPU capability detection (E.g. CPU type, MMX, SSE[2] support)
	* Use the APIC when available on single CPU systems

* Jun 26 2003, Kristian Van Der Vliet *

Disabled errent debug output from the IP stack during tcp transmits.

* Jun 26 2003, Kristian Van Der Vliet *

Applied patch from Arno Klenke <arno_klenke@yahoo.de> which stops the kernel from
unloading a filesystem if it is loaded a boot module.  This should stop spurious
"Unable to find boot device" messages when using the root=@boot argument.

* May 17 2003, Kristian Van Der Vliet *

find_boot_dev() function in init.c which is used to "probe" for a boot CD in all of the
available drives.  The function iterates over all of the available devices in /dev/disk and
attempts to mount each one of them using the boot FS.  If the disk can be mounted,
then a check is made for a file called "SYLLABLE" in the device root.

To enable boot device probing you must pass root=@boot to the kernel.

The flag MNTF_SLOW_DEVICE has also been added to filesystem.h
which the do_mount() function to attempt to mount a device upto a maximum of five
times.  This is useful if we are booting from E.g. a very slow CD-ROM drive, which
can take some time to spin up.

* Feb 16 2003, Kristian Van Der Vliet *

Applied a patch by Alexander Deynichenko <thorn@fpss.ru> which splits
the PCI class information into an API, base and sub-class.

* Dec 31 2002, Kristian Van Der Vliet *

Added SO_BROADCAST support to the ethernet driver and ARP layer.

kernel/net/eth_interface.c : Always ignore gateway address if
  the destination is 255.255.255.255

kernel/net/arp.c : Always map IP address 255.255.255.255 to
  MAC address ff:ff:ff:ff:ff:ff

kernel/net/udp.c : Recognise SO_SETSOCKOPT flags SO_BROADCAST
  and SO_REUSEPORT (Not correctly implemented, but recognised)

* Dec 30 2002, Kristian Van Der Vliet *

Added raw sockets (SOCK_RAW) support to the IP stack with a patch from
Ville Kallioniemi <festivus@mbnet.fi>

Added raw sockets (SOCK_RAW) to the IP stack
  Changed a lot of debugging output to use the kerndbg() macro

Added ping utility (More tools to follow)
  The kernel ICMP ignores ICMP_ECHOREPLY packets.

* Dec 24 2002, Kristian Van Der Vliet *

Applied a patch from Daniel Gryniewicz <dang@fprintf.net> to the AFS
(AtheOS File System) driver, and the "mount" utility to add read-only support.

Added a mount flag for read-only (mount -r)
Added mount flag processing for read-only flag - afs_mount will now set
the read-only afs filesystem flag
Added checks in all writing entrypoints to afs for the mount flag - these
entrypoints will return a read-only error if called on a read-only filesystem.

* Nov 3 2002, Kristian Van Der Vliet *

Added a kerndbg() macro to kdebug.h  Kernel output can now be controlled
by defining the DEBUG_LIMIT macro at compile time.

* Oct 24 2002, Kristian Van Der Vliet *

Added random.c which adds two functions, seed() and rand().  These can be
used by other kernel functions, and device drivers (E.g. the new /dev/random
device).

* Sep 23 2002, Kristian Van Der Vliet *

Added make_port_public(), make_port_private() and find_port() syscalls
to msgport.c  These syscalls can be used to provide a "public" message port,
which can be retrieved by another process with the find_port() syscall.

For more information, you should refer to the online documentation.

* Sep 23 2002, Kristian Van Der Vliet *

Removed both set_tld() and get_tld() in process.c  These syscalls were not
required; they are implemented in user space as part of libc.


* Sep 15 2002, Kristian Van Der Vliet *

Applied a fix to sys/kernel/kernel/vfs/vfs.c  The fcntl() F_GETLK command
now works as expected.

